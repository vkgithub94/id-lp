"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getScrollNode = exports.default = void 0;

var _typeof2 = _interopRequireDefault(require("reshow-runtime/helpers/typeof"));

var _winDoc = require("win-doc");

var _reshowConstant = require("reshow-constant");

var lastScrollStore = {};
var oDoc;
var oWin;
var isWebkit;
var docEl;
var domCount = 0;

var initDoc = function initDoc() {
  oDoc = (0, _winDoc.doc)();
  oWin = (0, _winDoc.win)();
  isWebkit = _reshowConstant.UNDEFINED !== (0, _typeof2.default)(oDoc.webkitIsFullScreen);
  docEl = oDoc.documentElement;
};

var getScrollNode = function getScrollNode(el) {
  if (!oDoc) {
    initDoc();
  }

  if (!el && oDoc) {
    if (oDoc.scrollingElement) {
      el = oDoc.scrollingElement;
    } else if (isWebkit) {
      el = oDoc.body;
    } else {
      el = docEl;
    }
  }

  if (!el.id) {
    el.id = 'scroll-info-' + domCount;
    domCount++;
  }

  return el;
};

exports.getScrollNode = getScrollNode;

var getScrollInfo = function getScrollInfo(el, margin) {
  el = getScrollNode(el);

  if (!margin) {
    margin = 50;
  }

  var w;
  var h;
  var nodeName = (el.nodeName || '').toLowerCase();
  var isRoot = 'body' === nodeName || 'html' === nodeName;

  if (isRoot) {
    w = Math.max(docEl.clientWidth || 0, oWin.innerWidth || 0);
    h = Math.max(docEl.clientHeight || 0, oWin.innerHeight || 0);
  } else {
    w = el.clientWidth;
    h = el.clientHeight;
  }

  var scrollLeft = el.scrollLeft;
  var scrollHeight = el.scrollHeight;
  var scrollTop = el.scrollTop;
  var scrollWidth = el.scrollWidth;
  var scrollBottom = scrollTop + h;
  var scrollRight = scrollLeft + w;
  var elId = el.id;
  var lastScroll = lastScrollStore[elId];
  var info = {
    atTop: scrollTop < margin,
    atRight: scrollRight > scrollWidth - margin,
    atBottom: scrollBottom > scrollHeight - margin,
    atLeft: scrollLeft < margin,
    isScrollDown: lastScroll && scrollTop > lastScroll.top,
    isScrollLeft: lastScroll && scrollLeft < lastScroll.left,
    isScrollRight: lastScroll && scrollLeft > lastScroll.left,
    isScrollUp: lastScroll && scrollTop < lastScroll.top,
    scrollWidth: scrollWidth,
    scrollHeight: scrollHeight,
    scrollNodeWidth: w,
    scrollNodeHeight: h,
    top: scrollTop,
    right: scrollRight,
    bottom: scrollBottom,
    left: scrollLeft
  };
  lastScrollStore[elId] = info;
  return info;
};

var _default = getScrollInfo;
exports.default = _default;