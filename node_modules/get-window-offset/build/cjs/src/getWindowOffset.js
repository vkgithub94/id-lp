"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread"));

var _defineProperty2 = _interopRequireDefault(require("reshow-runtime/helpers/defineProperty"));

var _getScrollInfo = _interopRequireDefault(require("get-scroll-info"));

var _getoffset = _interopRequireDefault(require("getoffset"));

var _isOnScreen = _interopRequireDefault(require("./isOnScreen"));

var _isFixed = _interopRequireDefault(require("./isFixed"));

var _isSetOverflow = _interopRequireDefault(require("./isSetOverflow"));

var calWindowOffset = function calWindowOffset(domInfo, scrollInfo) {
  var _distanceFlip;

  var distance = {};
  distance.top = domInfo.top - scrollInfo.top;
  distance.right = scrollInfo.right - domInfo.right;
  distance.bottom = scrollInfo.bottom - domInfo.bottom;
  distance.left = domInfo.left - scrollInfo.left;
  var distanceFlip = (_distanceFlip = {}, (0, _defineProperty2.default)(_distanceFlip, distance.top, 't'), (0, _defineProperty2.default)(_distanceFlip, distance.right, 'r'), (0, _defineProperty2.default)(_distanceFlip, distance.bottom, 'b'), (0, _defineProperty2.default)(_distanceFlip, distance.left, 'l'), _distanceFlip);
  var maxDistance = Math.max(distance.top, distance.right, distance.bottom, distance.left);
  var firstKey = distanceFlip[maxDistance];
  var secondKey;
  var locs = [firstKey + 'c'];

  if (firstKey === 't' || firstKey === 'b') {
    var _distanceFlip2;

    distanceFlip = (_distanceFlip2 = {}, (0, _defineProperty2.default)(_distanceFlip2, distance.right, 'r'), (0, _defineProperty2.default)(_distanceFlip2, distance.left, 'l'), _distanceFlip2);
    secondKey = distanceFlip[Math.max(distance.left, distance.right)];
  } else {
    var _distanceFlip3;

    distanceFlip = (_distanceFlip3 = {}, (0, _defineProperty2.default)(_distanceFlip3, distance.top, 't'), (0, _defineProperty2.default)(_distanceFlip3, distance.bottom, 'b'), _distanceFlip3);
    secondKey = firstKey;
    firstKey = distanceFlip[Math.max(distance.top, distance.bottom)];
  }

  locs.push(firstKey + secondKey);
  locs.push(secondKey + firstKey);
  var tb = firstKey;
  var lr = secondKey;
  return {
    locs: locs,
    tb: tb,
    lr: lr
  };
};

var getWindowOffset = function getWindowOffset(dom) {
  if (!dom) {
    console.error('getWindowOffset not assign dom');
    console.trace();
    return false;
  }

  var fixedNode = (0, _isFixed.default)(dom);
  var scrollNode = (0, _isSetOverflow.default)(dom);
  var scrollInfo = (0, _getScrollInfo.default)();
  var cookScrollInfo = (0, _objectSpread2.default)({}, scrollInfo);

  if (fixedNode) {
    var fixedScrollInfo = (0, _getScrollInfo.default)(fixedNode);
    cookScrollInfo.top = fixedScrollInfo.top;
    cookScrollInfo.right = scrollInfo.scrollNodeWidth;
    cookScrollInfo.bottom = scrollInfo.scrollNodeHeight;
    cookScrollInfo.left = fixedScrollInfo.left;
  } else if (scrollNode) {
    var scrollNodeScrollInfo = (0, _getScrollInfo.default)(scrollNode);
    cookScrollInfo.top += scrollNodeScrollInfo.top;
    cookScrollInfo.right += scrollNodeScrollInfo.left;
    cookScrollInfo.bottom += scrollNodeScrollInfo.top;
    cookScrollInfo.left += scrollNodeScrollInfo.left;
  }

  var domInfo = (0, _isOnScreen.default)((0, _getoffset.default)(dom, fixedNode), cookScrollInfo);
  domInfo.fixedNode = fixedNode;
  domInfo.scrollNode = scrollNode;

  if (!domInfo.isOnScreen) {
    console.warn('Dom is not in screen', {
      dom: dom,
      domInfo: domInfo,
      scrollInfo: scrollInfo,
      cookScrollInfo: cookScrollInfo
    });
    return false;
  }

  var result = (0, _objectSpread2.default)({
    domInfo: domInfo,
    scrollInfo: scrollInfo
  }, calWindowOffset(domInfo, cookScrollInfo));
  return result;
};

var _default = getWindowOffset;
exports.default = _default;
module.exports = exports.default;