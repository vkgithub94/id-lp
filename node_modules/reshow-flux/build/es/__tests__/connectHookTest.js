import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _possibleConstructorReturn from "reshow-runtime/es/helpers/possibleConstructorReturn";
import _getPrototypeOf from "reshow-runtime/es/helpers/getPrototypeOf";
import _inherits from "reshow-runtime/es/helpers/inherits";
import React from 'react';
import { expect } from 'chai';
import { shallow, mount, configure } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
configure({
  adapter: new Adapter()
});
import connectHook from '../connectHook';
import { Dispatcher, ReduceStore } from '../index';
describe('Test Connect Hook', function () {
  var FakeStore =
  /*#__PURE__*/
  function (_ReduceStore) {
    _inherits(FakeStore, _ReduceStore);

    function FakeStore() {
      _classCallCheck(this, FakeStore);

      return _possibleConstructorReturn(this, _getPrototypeOf(FakeStore).apply(this, arguments));
    }

    _createClass(FakeStore, [{
      key: "getInitialState",
      value: function getInitialState() {
        return {};
      }
    }, {
      key: "reduce",
      value: function reduce(state, action) {
        return action;
      }
    }]);

    return FakeStore;
  }(ReduceStore);

  var dispatcher;
  var dispatch;
  var store;
  beforeEach(function () {
    dispatcher = new Dispatcher();
    dispatch = dispatcher.dispatch;
    store = new FakeStore(dispatcher);
  });
  it('basic test', function () {
    var Foo = function Foo(props) {
      return React.createElement("div", {
        className: props.foo
      });
    };

    var stores = [store];
    var FooHook = connectHook(Foo, {
      calculateState: function calculateState(prevState, props) {
        return store.getState();
      },
      getStores: function getStores(props) {
        return stores;
      }
    });
    var wrap = mount(React.createElement(FooHook, {
      data: true
    }));
    expect(wrap.html()).to.equal('<div></div>');
    var a = {
      foo: '111'
    };
    dispatch(a);
    expect(wrap.html()).to.equal('<div class="111"></div>');
    dispatch({
      foo: '222'
    });
    expect(wrap.html()).to.equal('<div class="222"></div>');
  });
});