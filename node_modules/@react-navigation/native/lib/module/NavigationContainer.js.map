{"version":3,"sources":["NavigationContainer.tsx"],"names":["React","BaseNavigationContainer","ThemeProvider","DefaultTheme","useBackButton","NavigationContainer","forwardRef","ref","theme","rest","refContainer","useRef","useImperativeHandle","current"],"mappings":"uPAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OACEC,uBADF,KAIO,wBAJP,CAKA,MAAOC,CAAAA,aAAP,KAA0B,yBAA1B,CACA,MAAOC,CAAAA,YAAP,KAAyB,wBAAzB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAkBA,GAAMC,CAAAA,mBAAmB,CAAGL,KAAK,CAACM,UAAN,CAAiB,QAASD,CAAAA,mBAAT,MAE3CE,GAF2C,CAG3C,qBAFEC,KAEF,CAFEA,KAEF,qBAFUL,YAEV,YAF2BM,IAE3B,0CACA,GAAMC,CAAAA,YAAY,CAAGV,KAAK,CAACW,MAAN,CAAqC,IAArC,CAArB,CAEAP,aAAa,CAACM,YAAD,CAAb,CAEAV,KAAK,CAACY,mBAAN,CAA0BL,GAA1B,CAA+B,iBAAMG,CAAAA,YAAY,CAACG,OAAnB,EAA/B,EAEA,MACE,qBAAC,aAAD,EAAe,KAAK,CAAEL,KAAtB,iDACE,oBAAC,uBAAD,aAA6BC,IAA7B,EAAmC,GAAG,CAAEC,YAAxC,kDADF,CADF,CAKD,CAf2B,CAA5B,CAiBA,cAAeL,CAAAA,mBAAf","sourcesContent":["import * as React from 'react';\nimport {\n  BaseNavigationContainer,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from '@react-navigation/core';\nimport ThemeProvider from './theming/ThemeProvider';\nimport DefaultTheme from './theming/DefaultTheme';\nimport useBackButton from './useBackButton';\nimport { Theme } from './types';\n\ntype Props = NavigationContainerProps & {\n  theme?: Theme;\n};\n\n/**\n * Container component which holds the navigation state\n * designed for mobile apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst NavigationContainer = React.forwardRef(function NavigationContainer(\n  { theme = DefaultTheme, ...rest }: Props,\n  ref: React.Ref<NavigationContainerRef>\n) {\n  const refContainer = React.useRef<NavigationContainerRef>(null);\n\n  useBackButton(refContainer);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  return (\n    <ThemeProvider value={theme}>\n      <BaseNavigationContainer {...rest} ref={refContainer} />\n    </ThemeProvider>\n  );\n});\n\nexport default NavigationContainer;\n"]}