import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _possibleConstructorReturn from "reshow-runtime/es/helpers/possibleConstructorReturn";
import _getPrototypeOf from "reshow-runtime/es/helpers/getPrototypeOf";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { PureComponent } from 'react';
import get from 'get-object-value';
import { mixClass, SemanticUI } from 'react-atomic-molecule';
import scrollStore from '../../src/stores/scrollStore';
import fastScrollStore from '../../src/stores/fastScrollStore';

var _ref =
/*#__PURE__*/
React.createElement(SemanticUI, null);

var ScrollSpy =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(ScrollSpy, _PureComponent);

  function ScrollSpy() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ScrollSpy);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollSpy)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {});

    return _this;
  }

  _createClass(ScrollSpy, [{
    key: "getOffsetEl",
    value: function getOffsetEl() {
      if (this.el) {
        return this.el;
      } else {
        console.warn('Please use SemanticUI. props.container -> import {SemanticUI} from "react-atomic-molecule"');
      }
    }
  }, {
    key: "useStore",
    value: function useStore() {
      var noDelay = this.props.noDelay;
      return noDelay ? fastScrollStore : scrollStore;
    }
  }, {
    key: "attach",
    value: function attach() {
      if (this.useStore().hasAttach(this)) {
        return this.state.id;
      }

      var id = this.useStore().attach(this);
      this.setState({
        id: id
      });
      return id;
    }
  }, {
    key: "detach",
    value: function detach() {
      return this.useStore().detach(this);
    }
  }, {
    key: "isScrollReceiver",
    value: function isScrollReceiver(el) {
      if (get(el, ['props', 'isScrollReceiver'])) {
        return true;
      }

      return false;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.attach();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.detach();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      /**
       * monitorScroll use in store, in component just for reset props.
       */
      var _this$props = this.props,
          className = _this$props.className,
          monitorScroll = _this$props.monitorScroll,
          children = _this$props.children,
          container = _this$props.container,
          noDelay = _this$props.noDelay,
          others = _objectWithoutProperties(_this$props, ["className", "monitorScroll", "children", "container", "noDelay"]);

      var isScrollReceiver = this.isScrollReceiver(children);
      var targetId = this.state.id;
      var classes = mixClass(className, 'spy-tar-' + targetId);
      var cookChildren;
      var thisContainer;
      var thisProps;

      if (isScrollReceiver) {
        thisContainer = children;
        thisProps = _objectSpread({}, others, {}, children.props, {
          className: classes,
          targetId: targetId,
          container: container,
          noDelay: noDelay
        });
      } else {
        thisProps = _objectSpread({
          children: children,
          className: classes
        }, others);

        if (container) {
          thisContainer = container;
        } else {
          thisContainer = _ref;
        }
      }

      thisProps = _objectSpread({}, thisProps, {
        refCb: function refCb(el) {
          return _this2.el = el;
        }
      });
      return React.cloneElement(thisContainer, thisProps);
    }
  }]);

  return ScrollSpy;
}(PureComponent);

_defineProperty(ScrollSpy, "defaultProps", {
  monitorScroll: true,
  noDelay: false
});

export default ScrollSpy;