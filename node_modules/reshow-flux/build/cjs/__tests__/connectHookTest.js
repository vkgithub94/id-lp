"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("reshow-runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("reshow-runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("reshow-runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("reshow-runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("reshow-runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _chai = require("chai");

var _enzyme = require("enzyme");

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _connectHook = _interopRequireDefault(require("../connectHook"));

var _index = require("../index");

(0, _enzyme.configure)({
  adapter: new _enzymeAdapterReact["default"]()
});
describe('Test Connect Hook', function () {
  var FakeStore =
  /*#__PURE__*/
  function (_ReduceStore) {
    (0, _inherits2["default"])(FakeStore, _ReduceStore);

    function FakeStore() {
      (0, _classCallCheck2["default"])(this, FakeStore);
      return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(FakeStore).apply(this, arguments));
    }

    (0, _createClass2["default"])(FakeStore, [{
      key: "getInitialState",
      value: function getInitialState() {
        return {};
      }
    }, {
      key: "reduce",
      value: function reduce(state, action) {
        return action;
      }
    }]);
    return FakeStore;
  }(_index.ReduceStore);

  var dispatcher;
  var dispatch;
  var store;
  beforeEach(function () {
    dispatcher = new _index.Dispatcher();
    dispatch = dispatcher.dispatch;
    store = new FakeStore(dispatcher);
  });
  it('basic test', function () {
    var Foo = function Foo(props) {
      return _react["default"].createElement("div", {
        className: props.foo
      });
    };

    var stores = [store];
    var FooHook = (0, _connectHook["default"])(Foo, {
      calculateState: function calculateState(prevState, props) {
        return store.getState();
      },
      getStores: function getStores(props) {
        return stores;
      }
    });
    var wrap = (0, _enzyme.mount)(_react["default"].createElement(FooHook, {
      data: true
    }));
    (0, _chai.expect)(wrap.html()).to.equal('<div></div>');
    var a = {
      foo: '111'
    };
    dispatch(a);
    (0, _chai.expect)(wrap.html()).to.equal('<div class="111"></div>');
    dispatch({
      foo: '222'
    });
    (0, _chai.expect)(wrap.html()).to.equal('<div class="222"></div>');
  });
});