"use strict";

var _interopRequireWildcard = require("reshow-runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

var _assertThisInitialized2 = _interopRequireDefault(require("reshow-runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("reshow-runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("reshow-runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("reshow-runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("reshow-runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("reshow-runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("reshow-runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _chai = require("chai");

var _enzyme = require("enzyme");

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _connectHook = _interopRequireDefault(require("../connectHook"));

var _ReduceStore2 = _interopRequireDefault(require("../ReduceStore"));

var _index = require("../index");

var _reshowFluxBase = require("reshow-flux-base");

(0, _enzyme.configure)({
  adapter: new _enzymeAdapterReact["default"]()
});
describe('Test Connect hook for more test', function () {
  var FakeStore =
  /*#__PURE__*/
  function (_ReduceStore) {
    (0, _inherits2["default"])(FakeStore, _ReduceStore);

    function FakeStore() {
      (0, _classCallCheck2["default"])(this, FakeStore);
      return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(FakeStore).apply(this, arguments));
    }

    (0, _createClass2["default"])(FakeStore, [{
      key: "getInitialState",
      value: function getInitialState() {
        return {
          foo: 'bar'
        };
      }
    }, {
      key: "reduce",
      value: function reduce(state, action) {
        return action;
      }
    }]);
    return FakeStore;
  }(_ReduceStore2["default"]);

  var dispatcher;
  var store;
  beforeEach(function () {
    dispatcher = new _index.Dispatcher();
    store = new FakeStore(dispatcher);
  });
  it('could register with store', function () {
    var FakeComponent = function FakeComponent(_ref) {
      var foo = _ref.foo;
      return _react["default"].createElement("div", null, foo);
    };

    var FakeConnected = (0, _connectHook["default"])(FakeComponent, {
      calculateState: function calculateState(prevState, props) {
        if (!prevState.__init__) {
          return {
            __init__: true
          };
        } else {
          return {
            foo: store.getState().foo
          };
        }
      },
      getStores: function getStores(props) {
        return [store];
      }
    });

    var vDom = _react["default"].createElement(FakeConnected, null);

    var wrap = (0, _enzyme.mount)(vDom);
    store.emit(_reshowFluxBase.CHANGE);
    (0, _chai.expect)(wrap.html()).to.equal('<div>bar</div>');
  });
  it('could work with dispatcher', function () {
    var calculateTimes = 0;

    var FakeComponent = function FakeComponent(_ref2) {
      var aaa = _ref2.aaa;
      return _react["default"].createElement("div", null, aaa);
    };

    var FakeConnected = (0, _connectHook["default"])(FakeComponent, {
      calculateState: function calculateState(prevState, props) {
        var state = store.getState();
        calculateTimes++;
        return {
          aaa: state.aaa
        };
      },
      getStores: function getStores(props) {
        return [store];
      }
    });
    (0, _chai.expect)(calculateTimes).to.equal(0);

    var vDom = _react["default"].createElement(FakeConnected, null);

    (0, _chai.expect)(calculateTimes).to.equal(0);
    var html = (0, _enzyme.mount)(vDom);
    (0, _chai.expect)(calculateTimes).to.equal(2); //init and handlchange

    dispatcher.dispatch({
      aaa: 'Hello dispatcher!'
    });
    html.update();
    (0, _chai.expect)(calculateTimes).to.equal(3);
    (0, _chai.expect)(html.html()).to.equal('<div>Hello dispatcher!</div>');
    html.unmount();
    dispatcher.dispatch({
      aaa: 'Hello Unmount!'
    });
    (0, _chai.expect)(calculateTimes).to.equal(3);
  });
  it('could work withProps', function (done) {
    var getStoresProps = null;
    var calculateStateProps = null;

    var FakeComponent = function FakeComponent(_ref3) {
      var foo = _ref3.foo;
      return _react["default"].createElement("div", null, foo);
    };

    var FakeConnected = (0, _connectHook["default"])(FakeComponent, {
      calculateState: function calculateState(prevState, props) {
        calculateStateProps = (0, _objectSpread2["default"])({}, props);
        return {
          foo: props.foo
        };
      },
      getStores: function getStores(props) {
        getStoresProps = props;
        return [store];
      }
    });
    var changeFoo;

    var Parent =
    /*#__PURE__*/
    function (_Component) {
      (0, _inherits2["default"])(Parent, _Component);

      function Parent(props) {
        var _this;

        (0, _classCallCheck2["default"])(this, Parent);
        _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Parent).call(this, props));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {});

        changeFoo = function changeFoo(v) {
          _this.setState({
            foo: v
          });
        };

        return _this;
      }

      (0, _createClass2["default"])(Parent, [{
        key: "render",
        value: function render() {
          var foo = null;

          if (this.state && this.state.foo) {
            foo = this.state.foo;
          }

          return _react["default"].createElement(FakeConnected, {
            foo: foo
          });
        }
      }]);
      return Parent;
    }(_react.Component);

    var vDom = _react["default"].createElement(Parent, null);

    var wrap = (0, _enzyme.mount)(vDom);
    (0, _chai.expect)(getStoresProps).to.deep.equal({
      foo: null
    });
    (0, _chai.expect)(calculateStateProps).to.deep.equal({
      foo: null
    });
    changeFoo('bar');
    wrap.update();
    setTimeout(function () {
      (0, _chai.expect)(wrap.html()).to.equal('<div>bar</div>');
      (0, _chai.expect)(getStoresProps).to.deep.equal({
        foo: 'bar'
      });
      (0, _chai.expect)(calculateStateProps).to.deep.equal({
        foo: 'bar'
      });
      done();
    });
  });
  it('could work with empty calculateState', function () {
    var FakeComponent = function FakeComponent(_ref4) {
      var foo = _ref4.foo;
      return _react["default"].createElement("div", null, foo);
    };

    var FakeConnected = (0, _connectHook["default"])(FakeComponent, {
      calculateState: function calculateState(prevState, props) {},
      getStores: function getStores(props) {
        return [store];
      }
    });

    var vDom = _react["default"].createElement(FakeConnected, {
      aaa: "bbb"
    });

    var wrap = (0, _enzyme.mount)(vDom);
    var props = wrap.props();
    (0, _chai.expect)(props).to.deep.equal({
      aaa: 'bbb'
    });
  });
});