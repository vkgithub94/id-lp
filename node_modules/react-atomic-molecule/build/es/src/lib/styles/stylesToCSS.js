import hyphenateStyleName from 'hyphenate-style-name';
import get from 'get-object-value'; // Follows syntax at https://developer.mozilla.org/en-US/docs/Web/CSS/content,
// including multiple space separated values.

var unquotedContentValueRegex = /^(normal|none|(\b(url\([^)]*\)|chapter_counter|attr\([^)]*\)|(no-)?(open|close)-quote|inherit)((\b\s*)|$|\s+))+)$/;
var isArray = Array.isArray;
var keys = Object.keys;
var browsers = ['webkit', 'moz'];

var buildRule = function buildRule(key, value) {
  if (null === value) {
    return '';
  }

  if (key === 'content' && !unquotedContentValueRegex.test(value)) {
    value = "'" + value.replace(/'/g, "\\'") + "'";
  }

  return hyphenateStyleName(key) + ': ' + value + ';';
};

var buildRules = function buildRules(result, styleId, selector) {
  var rules = get(result.styleIds, [styleId, 'style'], []);

  if (!rules.length) {
    return result;
  }

  var parentSelector;

  if (isArray(selector)) {
    parentSelector = selector[0].trim();
    selector.shift();
  } else {
    selector = [selector];
  }

  var myRules = [];
  rules.forEach(function (rule, i) {
    var mycss = '';
    mycss += selector[i] + ' {';
    keys(rule).forEach(function (styleKey) {
      if (rule[styleKey] && rule[styleKey].forEach) {
        rule[styleKey].forEach(function (item) {
          return mycss += buildRule(styleKey, item);
        });
      } else {
        mycss += buildRule(styleKey, rule[styleKey]);
      }
    });
    mycss += '}';
    myRules.push(mycss);
  });
  var myRule = myRules.join('\n');

  if (parentSelector) {
    var mycssArr = [parentSelector + ' {\n' + myRule + '\n}\n'];
    var keyframesString = '@keyframes';

    if (0 === parentSelector.indexOf(keyframesString)) {
      browsers.forEach(function (browser) {
        mycssArr.push(parentSelector.replace(keyframesString, '@-' + browser + '-keyframes') + ' {\n' + myRule + '\n}\n');
      });
    }

    myRule = mycssArr.join('\n');
  }

  result.cssArr[styleId] = myRule;
  result.css += myRule;
  return result;
};

var replicateSelector = function replicateSelector(s) {
  s = '.' + s;
  var a = [s];

  for (var i = 1; i < 10; i++) {
    a[i] = a[i - 1] + s + i;
  }

  return a.join(',');
};

var buildStyle = function buildStyle(result, oStyle) {
  var styleId = oStyle.styleId;

  if (!styleId || result.styleIds[styleId]) {
    return;
  }

  var selector = oStyle.selector;

  if (selector) {
    if (isArray(selector) && !selector[1]) {
      selector[1] = replicateSelector(styleId);
    }
  } else {
    selector = replicateSelector(styleId);
  }

  result.styleIds[styleId] = oStyle; //for check already inject

  buildRules(result, styleId, selector);
};

var stylesToCSS = function stylesToCSS(styles) {
  if (!isArray(styles)) {
    styles = [styles];
  }

  var result = {
    css: '',
    styleIds: {},
    cssArr: {}
  };
  styles.forEach(function (style) {
    return buildStyle(result, style);
  });
  return result;
};

export default stylesToCSS;