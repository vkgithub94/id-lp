import _extends from "reshow-runtime/es/helpers/extends";
import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";

/* jshint esnext: true */
import React, { cloneElement } from 'react';
import { mixClass } from 'class-lib';
import get from 'get-object-value';
import SemanticUI from '../molecules/SemanticUI';
import Message from '../molecules/Message';
import Label from '../molecules/Label';

var _ref =
/*#__PURE__*/
React.createElement(SemanticUI, null);

var Field = function Field(props) {
  var className = props.className,
      fieldClassName = props.fieldClassName,
      fieldStyle = props.fieldStyle,
      fieldStyles = props.fieldStyles,
      fieldProps = props.fieldProps,
      children = props.children,
      inline = props.inline,
      type = props.type,
      inputComponent = props.inputComponent,
      inputWrapper = props.inputWrapper,
      inputWrapperAttr = props.inputWrapperAttr,
      label = props.label,
      labelStyle = props.labelStyle,
      labelStyles = props.labelStyles,
      labelWrap = props.labelWrap,
      style = props.style,
      styles = props.styles,
      styleOrder = props.styleOrder,
      required = props.required,
      messageType = props.messageType,
      messageProps = props.messageProps,
      message = props.message,
      topTip = props.topTip,
      bottomTip = props.bottomTip,
      rightTip = props.rightTip,
      others = _objectWithoutProperties(props, ["className", "fieldClassName", "fieldStyle", "fieldStyles", "fieldProps", "children", "inline", "type", "inputComponent", "inputWrapper", "inputWrapperAttr", "label", "labelStyle", "labelStyles", "labelWrap", "style", "styles", "styleOrder", "required", "messageType", "messageProps", "message", "topTip", "bottomTip", "rightTip"]);

  var isGroup = !(props.atom || inputComponent);
  var classes = mixClass(fieldClassName, {
    'label-wrap': labelWrap,
    required: !!required,
    field: !isGroup,
    fields: isGroup,
    inline: !!inline,
    info: messageType === 'info',
    error: messageType === 'error',
    success: messageType === 'success',
    warning: messageType === 'warning'
  });
  var oLabel = null;
  var thisMessageProps = messageProps || {};

  if (label) {
    var thisLabelStyle = _objectSpread({}, get(labelStyle, null, {}));

    if (props.id) {
      thisLabelStyle.cursor = 'pointer';
    }

    if (labelWrap) {
      thisLabelStyle.flex = '0 1 100%';
      thisMessageProps.style = _objectSpread({}, thisMessageProps.style);
      thisMessageProps.style.flex = '0 1 100%';
    }

    oLabel = React.createElement(SemanticUI, {
      atom: "label",
      key: "label",
      htmlFor: props.id,
      style: thisLabelStyle,
      styles: labelStyles,
      styleOrder: styleOrder
    }, label);
  }

  var input = null;
  var thisFieldStyles = fieldStyles;
  var thisFieldStyle = fieldStyle;
  var thisChildren = children;

  if (isGroup) {
    if (!thisFieldStyles) {
      thisFieldStyles = styles;
    }

    if (!thisFieldStyle) {
      thisFieldStyle = style || {};
    }

    if (label && labelWrap) {
      thisFieldStyle.flexWrap = 'wrap';
    }
  } else {
    var isSelect = 'select' === props.atom;
    input = inputComponent ? inputComponent : _ref;
    var inputProps = get(input, ['props'], {}); // set inputChildren

    var inputChildren = inputProps.children || null;

    if (isSelect) {
      thisChildren = null;
      inputChildren = children;
    }

    var inputClasses = mixClass(className, inputProps.className, {
      dropdown: isSelect
    });
    input = cloneElement(input, _objectSpread({}, others, {
      style: _objectSpread({
        boxSizing: 'inherit'
      }, get(input, ['props', 'style']), {}, style),
      key: 'input',
      className: inputClasses,
      styles: styles,
      styleOrder: styleOrder,
      required: required,
      type: type
    }), inputChildren);
  }

  var topTipEl;

  if (topTip) {
    topTipEl = React.createElement(Label, {
      key: "topTip",
      className: "pointing below prompt"
    }, topTip);
  }

  var inputs;

  if ('checkbox' === type || 'radio' === type) {
    inputs = [topTipEl, input, oLabel];
  } else {
    inputs = [oLabel, topTipEl, input];
  }

  if (inputWrapper) {
    inputs = cloneElement(inputWrapper, inputWrapperAttr, inputs);
  }

  var messageEl;
  var bottomTipEl;
  var rightTipEl;

  if (message) {
    messageEl = React.createElement(Message, _extends({
      messageType: messageType
    }, thisMessageProps), message);
  }

  if (bottomTip) {
    bottomTipEl = React.createElement(Label, {
      className: "above pointing prompt"
    }, bottomTip);
  }

  if (rightTip) {
    rightTipEl = React.createElement(Label, {
      className: "left pointing prompt"
    }, rightTip);
  }

  return React.createElement(SemanticUI, _extends({}, fieldProps, {
    className: classes,
    style: thisFieldStyle,
    styles: thisFieldStyles,
    styleOrder: styleOrder
  }), inputs, thisChildren, rightTipEl, bottomTipEl, messageEl);
};

export default Field;