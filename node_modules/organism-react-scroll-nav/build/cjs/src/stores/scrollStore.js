"use strict";

var _interopRequireWildcard = require("reshow-runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scrollStore = exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("reshow-runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("reshow-runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("reshow-runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("reshow-runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("reshow-runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("reshow-runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("reshow-runtime/helpers/defineProperty"));

var _immutable = require("immutable");

var _reshowFlux = require("reshow-flux");

var _getScrollInfo = _interopRequireDefault(require("get-scroll-info"));

var _getWindowOffset = require("get-window-offset");

var _getoffset = _interopRequireDefault(require("getoffset"));

var _getObjectValue = _interopRequireWildcard(require("get-object-value"));

var _scrollDispatcher = _interopRequireWildcard(require("../scrollDispatcher"));

var _testForPassiveScroll = _interopRequireDefault(require("../testForPassiveScroll"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var incNum = 0;
var DEFAULT_SCROLL_ID = -1;
var keys = Object.keys;

var scrollStore =
/*#__PURE__*/
function (_ReduceStore) {
  (0, _inherits2["default"])(scrollStore, _ReduceStore);

  function scrollStore() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, scrollStore);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(scrollStore)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "storeName", 'delayScroll');
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "isInitEvent", {});
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "isInitResizeEvent", false);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "spys", {});
    return _this;
  }

  (0, _createClass2["default"])(scrollStore, [{
    key: "getInitialState",
    value: function getInitialState() {
      this.trigger = this.triggerScroll.bind(this);
      this.arrNode = (0, _immutable.Map)();
      this.margins = (0, _immutable.Set)();
      this.scrollMonitor = this.runScrollMonitor.bind(this);
      this.bindHandleResize = this.handleResize.bind(this);
      return (0, _immutable.Map)({
        scrollDelay: 50,
        scrollMargin: 0
      });
    }
  }, {
    key: "initResizeEvent",
    value: function initResizeEvent() {
      if ('undefined' !== typeof window) {
        this.isInitResizeEvent = true;
        var win = window;

        if (win.addEventListener) {
          win.addEventListener('resize', this.bindHandleResize);
        } else {
          win.attachEvent('onresize', this.bindHandleResize);
        }
      }
    }
  }, {
    key: "initEvent",
    value: function initEvent(el) {
      if ('undefined' !== typeof el) {
        var self = this;

        if (el.addEventListener) {
          var supportsPassive = (0, _testForPassiveScroll["default"])();
          el.addEventListener('scroll', self.scrollMonitor, supportsPassive ? {
            passive: true
          } : false);
        } else {
          el.attachEvent('onscroll', self.scrollMonitor);
        }

        setTimeout(function () {
          var fakeEvent = {
            target: el
          };
          self.scrollMonitor(fakeEvent); //for lazy content

          setTimeout(function () {
            return self.scrollMonitor(fakeEvent);
          }, 777);
        });

        if (!self.isInitResizeEvent) {
          self.initResizeEvent();
        }
      }
    }
  }, {
    key: "removeEvent",
    value: function removeEvent(el) {
      el.removeEventListener('scroll', this.scrollMonitor);
    }
  }, {
    key: "handleResize",
    value: function handleResize() {
      var _this2 = this;

      keys(this.spys).forEach(function (scrollId) {
        return _this2.runScrollMonitor({
          target: {
            id: scrollId
          }
        });
      });
    }
  }, {
    key: "runScrollMonitor",
    value: function runScrollMonitor(e) {
      var _this3 = this;

      clearTimeout(this._scrollTimeout);
      var self = this;
      var delay = self.getState().get('scrollDelay');
      self._scrollTimeout = setTimeout(function () {
        return _this3.trigger(e && e.target);
      }, delay);
    }
  }, {
    key: "triggerScroll",
    value: function triggerScroll(scrollNode) {
      var scrollId = (0, _getObjectValue["default"])(scrollNode, ['id']) || DEFAULT_SCROLL_ID;
      var defaultMargin = this.getState().get('scrollMargin');
      var actives = {
        mdefault: null
      };
      var offsetCache = {};
      var arrMonitorScroll = [];
      var scroll = (0, _getScrollInfo["default"])();
      var scrollTop = scroll.top + defaultMargin;
      var margin;
      (this.spys[scrollId] || []).forEach(function (node) {
        var nodeEl = node.getOffsetEl();

        var _get = (0, _getObjectValue["default"])(node, ['props'], {}),
            monitorScroll = _get.monitorScroll,
            scrollMargin = _get.scrollMargin;

        var pos = (0, _getoffset["default"])(nodeEl);

        if (monitorScroll) {
          if (scrollTop >= pos.top && scrollTop < pos.bottom) {
            actives.mdefault = node.id;
          }

          arrMonitorScroll.push(node);
        }

        margin = scrollMargin ? scrollMargin : defaultMargin;
        pos = (0, _getWindowOffset.isOnScreen)(pos, scroll, margin);
        offsetCache[node.id] = pos;
      });
      this.margins.forEach(function (margin) {
        scrollTop = scroll.top + margin;
        actives['m' + margin] = null;
        arrMonitorScroll.every(function (node) {
          var pos = offsetCache[node.id];

          if (scrollTop >= pos.top && scrollTop < pos.bottom - 1) {
            actives['m' + margin] = node.id;
            return false;
          }

          return true;
        });
      });
      this.margins = this.margins.clear();
      (0, _scrollDispatcher.scrollDispatch)(_objectSpread({}, actives, {
        nodes: offsetCache,
        scroll: scroll,
        storeName: this.storeName
      }));
    }
  }, {
    key: "getNode",
    value: function getNode(id) {
      if (this.arrMap && this.arrMap.get) {
        return (0, _getObjectValue.toJS)(this.arrMap.get(id));
      }
    }
  }, {
    key: "getOffset",
    value: function getOffset(id, callName) {
      var nodes = this.getMap('nodes');
      return nodes[id];
    }
  }, {
    key: "hasAttach",
    value: function hasAttach(node) {
      var attachToId = this.getAttachToId(node);

      if (this.spys[attachToId] && this.spys[attachToId].has(node)) {
        return attachToId;
      } else {
        return false;
      }
    }
  }, {
    key: "getNodeId",
    value: function getNodeId(node) {
      if (!node.id) {
        if (node.props && node.props.id) {
          node.id = node.props.id;
        } else {
          node.id = 'spy-' + incNum;
          incNum++;
        }
      }

      return node.id;
    }
  }, {
    key: "getAttachToId",
    value: function getAttachToId(node) {
      var attachTo = (0, _getObjectValue["default"])(node, ['props', 'attachTo']);
      var attachToId;

      if (attachTo) {
        node.attachTo = attachTo;
        attachToId = this.getNodeId(attachTo);
      } else {
        if ('undefined' !== typeof window) {
          node.attachTo = window;
        }

        attachToId = DEFAULT_SCROLL_ID;
      }

      return attachToId;
    }
  }, {
    key: "attach",
    value: function attach(node) {
      var nodeId = this.getNodeId(node);
      var attachToId = this.getAttachToId(node);

      if (!this.spys[attachToId]) {
        this.spys[attachToId] = (0, _immutable.Set)().add(node);
      } else {
        this.spys[attachToId] = this.spys[attachToId].add(node);
      }

      this.arrNode = this.arrNode.set(nodeId, node);

      if (!this.isInitEvent[attachToId]) {
        this.isInitEvent[attachToId] = true;
        this.initEvent(node.attachTo);
      }

      return nodeId;
    }
  }, {
    key: "detach",
    value: function detach(node) {
      var attachToId = this.hasAttach(node);

      if (attachToId) {
        this.spys[attachToId] = this.spys[attachToId].remove(node);
        this.arrNode = this.arrNode["delete"](node.id);

        if (!this.spys[attachToId].size) {
          this.removeEvent(node.attachTo);
          delete this.spys[attachToId];
          this.isInitEvent[attachToId] = false;
        }
      }
    }
  }, {
    key: "addMargin",
    value: function addMargin(num) {
      this.margins = this.margins.add(num);
    }
  }, {
    key: "deleteMargin",
    value: function deleteMargin(num) {
      this.margins = this.margins.remove(num);
    }
  }, {
    key: "reduce",
    value: function reduce(state, action) {
      var storeName = (0, _getObjectValue["default"])(action, ['storeName'], 'delayScroll');

      if (storeName === this.storeName) {
        return state.merge(action);
      } else {
        return state;
      }
    }
  }]);
  return scrollStore;
}(_reshowFlux.ReduceStore);

exports.scrollStore = scrollStore;

var _default = new scrollStore(_scrollDispatcher["default"]);

exports["default"] = _default;