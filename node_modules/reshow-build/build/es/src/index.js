import _typeof from "reshow-runtime/es/helpers/typeof";
import { isValidElement, cloneElement, createElement, Children } from 'react';
import { FUNCTION } from 'reshow-constant';
import { removeEmpty } from 'array.merge';

var buildFunc = function buildFunc(component, props, child) {
  // anonymous function will call directly
  if (FUNCTION === _typeof(component) && !component.name) {
    try {
      if (child != null) {
        props.children = child;
      }

      return component(props);
    } catch (e) {
      if (e.name === 'TypeError') {
        return buildReact(component, props, child);
      } else {
        throw e;
      }
    }
  } else {
    return buildReact(component, props, child);
  }
};

var buildReact = function buildReact(component, props, child) {
  var params = [component, props];

  if (child != null) {
    params.push(child);
  }

  return (isValidElement(component) ? cloneElement : createElement).apply(null, params);
};

var build = function build(component) {
  return function (props, child) {
    if (!component) {
      return null;
    }

    props = removeEmpty(props, true);

    var run = function run(comp) {
      return (isValidElement(comp) ? buildReact : buildFunc)(comp, props, child);
    };

    return component.map ? Children.map(component.map(function (comp) {
      return run(comp);
    }), function (c) {
      return c;
    }) : run(component);
  };
};

export default build;