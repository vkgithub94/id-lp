import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import mitt from './mitt';
var CHANGE = 'chg';

var Store =
/*#__PURE__*/
function () {
  _createClass(Store, [{
    key: "reduce",
    value: function reduce() {
      console.error('Not override reduce().');
    }
  }, {
    key: "getInitialState",
    value: function getInitialState() {
      console.error('Not override getInitialState().');
    }
  }, {
    key: "equals",
    value: function equals(one, two) {
      return one === two;
    }
  }]);

  function Store(dispatcher) {
    var _this = this;

    _classCallCheck(this, Store);

    _defineProperty(this, "__invokeOnDispatch", function (action) {
      var startingState = _this._state;

      var endingState = _this.reduce(startingState, action);

      if (endingState === undefined) {
        console.error('reduce() return undefined.');
      }

      if (!_this.equals(startingState, endingState)) {
        _this._state = endingState;

        _this.emit(CHANGE);
      }

      var next = _this.nextEmits.slice(0);

      _this.nextEmits = [];
      next.forEach(function (emit) {
        return _this.emit(emit);
      });
    });

    _defineProperty(this, "emit", function (e) {
      return _this.mitt.emit(e);
    });

    _defineProperty(this, "addListener", function (listener, e) {
      return _this.mitt.on(e, listener);
    });

    _defineProperty(this, "removeListener", function (listener, e) {
      return _this.mitt.off(e, listener);
    });

    dispatcher.register(this.__invokeOnDispatch);
    this._state = this.reset();
  }

  _createClass(Store, [{
    key: "reset",
    value: function reset() {
      this.mitt = new mitt();
      this.nextEmits = [];
      return this.getInitialState();
    }
  }, {
    key: "getState",
    value: function getState() {
      return this._state;
    }
    /* Following not extendable */

  }]);

  return Store;
}();

export default Store;
export { CHANGE };