"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _getoffset = _interopRequireDefault(require("getoffset"));

var _getScrollInfo = _interopRequireDefault(require("get-scroll-info"));

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _getAfterMove = _interopRequireDefault(require("./getAfterMove"));

var _getWindowOffset = _interopRequireDefault(require("./getWindowOffset"));

var _alignWith = _interopRequireDefault(require("./alignWith"));

var _isFullOnScreen = _interopRequireDefault(require("./isFullOnScreen"));

var _isSetOverflow = _interopRequireDefault(require("./isSetOverflow"));

var _isFixed = _interopRequireDefault(require("./isFixed"));

var _positions = _interopRequireDefault(require("./positions"));

var getAlignWithLoc = function getAlignWithLoc(toLoc) {
  var loc;

  switch (toLoc) {
    case _positions.default.TL:
      loc = _positions.default.TR;
      break;

    case _positions.default.TR:
      loc = _positions.default.TL;
      break;

    case _positions.default.BL:
      loc = _positions.default.BR;
      break;

    case _positions.default.BR:
      loc = _positions.default.BL;
      break;

    default:
      loc = toLoc;
      break;
  }

  return loc;
};

var fixFixedNode = function fixFixedNode(scrollInfo) {
  return function (move) {
    return [move[0] + scrollInfo.left, move[1] + scrollInfo.top];
  };
};

var fixScrollNode = function fixScrollNode(scrollInfo) {
  return function (move) {
    return [move[0] - scrollInfo.left, move[1] - scrollInfo.top];
  };
};

var alignUI = function alignUI(targetEl, floatEl, alignParams, winInfo) {
  var _get = (0, _getObjectValue.default)(alignParams, null, {}),
      toLoc = _get.toLoc,
      disableAutoLoc = _get.disableAutoLoc;

  if (!targetEl) {
    console.error('targetEl was empty');
    console.trace();
    return false;
  }

  var targetInfo;
  var locs = [];

  if (toLoc) {
    locs.push(toLoc);
  }

  if (!disableAutoLoc) {
    winInfo = winInfo || (0, _getWindowOffset.default)(targetEl);

    if (!winInfo) {
      console.error('get windows offset failed');
    } else {
      locs = locs.concat(winInfo.locs);
    }
  }

  if (!locs.length) {
    console.error('Not set any locs', toLoc);
    return;
  }

  if (!targetInfo) {
    if (winInfo) {
      targetInfo = winInfo.domInfo;
    } else {
      var targetFixedNode = (0, _isFixed.default)(targetEl);
      targetInfo = (0, _getoffset.default)(targetEl, targetFixedNode);
      targetInfo.scrollNode = (0, _isSetOverflow.default)(targetEl);
      targetInfo.fixedNode = targetFixedNode;
    }
  }

  var floatInfo = (0, _getoffset.default)(floatEl);
  var adjustMove;
  var scrollNode = targetInfo.scrollNode;
  var fixedNode = targetInfo.fixedNode;

  if (fixedNode) {
    if (fixedNode.contains(floatEl)) {
      adjustMove = fixFixedNode((0, _getScrollInfo.default)(fixedNode));
    } else {
      if (winInfo) {
        adjustMove = fixFixedNode(winInfo.scrollInfo);
      } else {
        adjustMove = fixFixedNode((0, _getScrollInfo.default)());
      }
    }
  } else if (scrollNode) {
    adjustMove = fixScrollNode((0, _getScrollInfo.default)(scrollNode));
  }

  var loc;
  var move;
  locs.some(function (locItem) {
    toLoc = locItem;
    loc = getAlignWithLoc(toLoc);
    move = (0, _alignWith.default)(targetInfo, floatInfo, loc);

    if (adjustMove) {
      move = adjustMove(move);
    }

    if (!winInfo) {
      return true;
    } else {
      var movePos = (0, _getAfterMove.default)(floatInfo, move);
      var bFullOnScreen = (0, _isFullOnScreen.default)(movePos, winInfo.scrollInfo);

      if (bFullOnScreen) {
        return true;
      } else {
        return false;
      }
    }
  });
  var result = {
    loc: loc,
    toLoc: toLoc,
    move: move
  }; //console.log(result);

  return result;
};

var _default = alignUI;
exports.default = _default;
module.exports = exports.default;