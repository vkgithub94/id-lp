function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import typeIs from '../getTypeOf';
import helperTypeof from '../typeof';
import { expect } from 'chai';
describe('Test typeof', function () {
  var FOO = function FOO() {
    _classCallCheck(this, FOO);
  };

  var t = function t() {
    _classCallCheck(this, t);
  };

  var symbol1 = Symbol();
  it('test typeIs', function () {
    expect(typeIs(symbol1)).to.equal('symbol');
    expect(typeIs({})).to.equal('object');
    expect(typeIs(function () {})).to.equal('function');
    expect(typeIs(new FOO())).to.equal('foo');
    expect(typeIs(undefined)).to.equal('undefined');
    expect(typeIs(null)).to.equal('null');
  });
  it('test helper typeof', function () {
    expect(helperTypeof(symbol1)).to.equal('symbol');
    expect(helperTypeof({})).to.equal('object');
    expect(helperTypeof(new FOO())).to.equal('object');
    expect(helperTypeof(new t())).to.equal('object');
    expect(helperTypeof(1)).to.equal('number');
    expect(helperTypeof('1')).to.equal('string');
    expect(helperTypeof(true)).to.equal('boolean');
    expect(helperTypeof(function () {})).to.equal('function');
    expect(helperTypeof(undefined)).to.equal('undefined');
    expect(helperTypeof(null)).to.equal('object');
  });
  it('test typeof array', function () {
    expect(helperTypeof([])).to.equal('object');
    expect(typeIs([])).to.equal('array');
  });
});