import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _possibleConstructorReturn from "reshow-runtime/es/helpers/possibleConstructorReturn";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _getPrototypeOf from "reshow-runtime/es/helpers/getPrototypeOf";
import _get from "reshow-runtime/es/helpers/get";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import dedup from 'array.dedup';
import { CHANGE } from 'reshow-flux-base';
var DEFAULT_OPTIONS = {
  withProps: false
};
var keys = Object.keys;

var getProps = function getProps(props, opt) {
  return opt.withProps && props ? props : {};
};

var getState = function getState(self, prevState, maybeProps, opt) {
  return self.calculateState(prevState, getProps(maybeProps, opt));
};

var getStores = function getStores(self, maybeProps, opt) {
  return self.getStores(getProps(maybeProps, opt));
};

var connect = function connect(Base, options) {
  var thisOptions = _objectSpread({}, DEFAULT_OPTIONS, {}, options || {});

  var ConnectedClass =
  /*#__PURE__*/
  function (_Base) {
    _inherits(ConnectedClass, _Base);

    function ConnectedClass(props) {
      var _this;

      _classCallCheck(this, ConnectedClass);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectedClass).call(this, props));

      _defineProperty(_assertThisInitialized(_this), "__stores", []);

      _defineProperty(_assertThisInitialized(_this), "__handleChange", function () {
        if (!_this.__stores) {
          // avoid race condition
          return;
        }

        var con = _this.constructor;

        _this.setState(function (prevState, currentProps) {
          return getState(con, prevState, currentProps, thisOptions);
        });
      });

      _defineProperty(_assertThisInitialized(_this), "__setStores", function (stores) {
        if (_this.__stores) {
          _this.__resetStores();
        }

        stores = dedup(stores);
        (stores || []).forEach(function (store) {
          return store.addListener(_this.__handleChange, CHANGE);
        });
        _this.__stores = stores;
      });

      _defineProperty(_assertThisInitialized(_this), "__resetStores", function () {
        if (!_this.__stores) {
          return;
        }

        _this.__stores.forEach(function (store) {
          return store.removeListener(_this.__handleChange, CHANGE);
        });

        _this.__stores = null;
      });

      var _con = _this.constructor;

      if (!_con.calculateState) {
        _con.calculateState = _get(_getPrototypeOf(ConnectedClass.prototype), "calculateState", _assertThisInitialized(_this));
      }

      if (!_con.getStores) {
        _con.getStores = _get(_getPrototypeOf(ConnectedClass.prototype), "getStores", _assertThisInitialized(_this));
      }

      _con.calculateState.bind(_con);

      _con.getStores.bind(_con);

      if (props.withConstructor) {
        _this.__setStores(getStores(_con, props, thisOptions));
      }

      if (!_this.state) {
        _this.state = {};
      }

      if (!thisOptions.withProps) {
        var calculatedState = getState(_con, undefined, props, thisOptions);

        if (calculatedState) {
          keys(calculatedState).forEach(function (key) {
            return _this.state[key] = calculatedState[key];
          });
        }
      }

      return _this;
    }

    _createClass(ConnectedClass, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (_get(_getPrototypeOf(ConnectedClass.prototype), "componentDidMount", this)) {
          _get(_getPrototypeOf(ConnectedClass.prototype), "componentDidMount", this).call(this);
        }

        if (this.props && !this.props.withConstructor) {
          this.__setStores(getStores(this.constructor, this.props, thisOptions));
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (_get(_getPrototypeOf(ConnectedClass.prototype), "componentDidUpdate", this)) {
          _get(_getPrototypeOf(ConnectedClass.prototype), "componentDidUpdate", this).call(this, prevProps, prevState);
        }

        if (thisOptions.withProps) {
          this.__setStores(getStores(this.constructor, this.props, thisOptions));
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (_get(_getPrototypeOf(ConnectedClass.prototype), "componentWillUnmount", this)) {
          _get(_getPrototypeOf(ConnectedClass.prototype), "componentWillUnmount", this).call(this);
        }

        this.__resetStores();
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var thisStates = null;

        if (_get(_getPrototypeOf(ConnectedClass), "getDerivedStateFromProps", this)) {
          thisStates = _get(_getPrototypeOf(ConnectedClass), "getDerivedStateFromProps", this).call(this, nextProps, prevState);
        }

        if (thisOptions.withProps) {
          var calState = getState(ConnectedClass, _objectSpread({}, prevState, {}, thisStates), nextProps, thisOptions);
          thisStates = _objectSpread({}, thisStates, {}, calState);
        }

        return thisStates;
      }
    }]);

    return ConnectedClass;
  }(Base);

  var componentName = Base.displayName || Base.name;
  ConnectedClass.displayName = 'FluxConnected(' + componentName + ')';
  return ConnectedClass;
};

export default connect;