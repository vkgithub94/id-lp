'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

import dedup from 'array.dedup';

var isArray = Array.isArray;
var keys = Object.keys;

var mixClass = function mixClass() {
    var classes = [];
    var args = arguments;
    keys(args).forEach(function (key) {
        var arg = args[key];
        if (!arg) {
            return;
        }
        var argType = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
        if (argType === 'string' || argType === 'number') {
            classes.push(arg);
        } else if (isArray(arg)) {
            classes.push(mixClass.apply(null, arg));
        } else if (argType === 'object') {
            keys(arg).forEach(function (k) {
                if (arg[k]) {
                    classes.push(k);
                }
            });
        }
    });
    var cookClasses = [];
    classes.forEach(function (c) {
        return cookClasses = cookClasses.concat(c.split(' '));
    });
    return dedup(cookClasses).join(' ');
};

export default mixClass;