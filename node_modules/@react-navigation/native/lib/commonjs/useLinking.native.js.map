{"version":3,"sources":["useLinking.native.tsx"],"names":["isUsingLinking","useLinking","ref","prefixes","config","getStateFromPath","getStateFromPathDefault","React","useEffect","Error","prefixesRef","useRef","configRef","getStateFromPathRef","current","extractPathFromURL","useCallback","url","prefix","startsWith","replace","undefined","getInitialState","Linking","getInitialURL","path","listener","navigation","state","action","type","resetRoot","payload","dispatch","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Linking } from 'react-native';\nimport {\n  getActionFromState,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n} from '@react-navigation/core';\nimport { LinkingOptions } from './types';\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    prefixes,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (isUsingLinking) {\n      throw new Error(\n        \"Looks like you are using 'useLinking' in multiple components. This is likely an error since deep links should only be handled in one place to avoid conflicts.\"\n      );\n    } else {\n      isUsingLinking = true;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const prefixesRef = React.useRef(prefixes);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n\n  React.useEffect(() => {\n    prefixesRef.current = prefixes;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n  }, [config, getStateFromPath, prefixes]);\n\n  const extractPathFromURL = React.useCallback((url: string) => {\n    for (const prefix of prefixesRef.current) {\n      if (url.startsWith(prefix)) {\n        return url.replace(prefix, '');\n      }\n    }\n\n    return undefined;\n  }, []);\n\n  const getInitialState = React.useCallback(async () => {\n    const url = await Linking.getInitialURL();\n    const path = url ? extractPathFromURL(url) : null;\n\n    if (path) {\n      return getStateFromPathRef.current(path, configRef.current);\n    } else {\n      return undefined;\n    }\n  }, [extractPathFromURL]);\n\n  React.useEffect(() => {\n    const listener = ({ url }: { url: string }) => {\n      const path = extractPathFromURL(url);\n      const navigation = ref.current;\n\n      if (navigation && path) {\n        const state = getStateFromPathRef.current(path, configRef.current);\n\n        if (state) {\n          const action = getActionFromState(state);\n\n          if (action.type === 'RESET_ROOT') {\n            navigation.resetRoot(action.payload);\n          } else {\n            navigation.dispatch(action);\n          }\n        }\n      }\n    };\n\n    Linking.addEventListener('url', listener);\n\n    return () => Linking.removeEventListener('url', listener);\n  }, [extractPathFromURL, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n"]}