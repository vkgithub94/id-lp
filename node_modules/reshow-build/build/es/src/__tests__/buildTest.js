import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _possibleConstructorReturn from "reshow-runtime/es/helpers/possibleConstructorReturn";
import _getPrototypeOf from "reshow-runtime/es/helpers/getPrototypeOf";
import _inherits from "reshow-runtime/es/helpers/inherits";
import React, { PureComponent, isValidElement, Children } from 'react';
import { expect } from 'chai';
import { shallow, mount, configure } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
configure({
  adapter: new Adapter()
});
import build from '../index';

var _ref =
/*#__PURE__*/
React.createElement("div", null, "foo");

var _ref2 =
/*#__PURE__*/
React.createElement("div", {
  id: "1",
  key: "0"
});

var _ref3 =
/*#__PURE__*/
React.createElement("div", {
  id: "2",
  key: "1"
});

var _ref7 =
/*#__PURE__*/
React.createElement("div", null, "1");

var _ref8 =
/*#__PURE__*/
React.createElement("div", null, "2");

var _ref10 =
/*#__PURE__*/
React.createElement("div", null, 'foo');

var _ref11 =
/*#__PURE__*/
React.createElement("div", null, 'bar');

var _ref13 =
/*#__PURE__*/
React.createElement("div", null);

var _ref14 =
/*#__PURE__*/
React.createElement("div", null);

var _ref17 =
/*#__PURE__*/
React.createElement("div", null, 'foo');

var _ref18 =
/*#__PURE__*/
React.createElement("div", null, 'bar');

var _ref21 =
/*#__PURE__*/
React.createElement("div", null);

var _ref22 =
/*#__PURE__*/
React.createElement("div", null);

describe('Test build', function () {
  it('test function', function () {
    var func = function func(props) {
      expect(props.foo).to.equal('bar');
    };

    build(func)({
      foo: 'bar'
    });
  });
  it('test function with error', function () {
    var run = function run() {
      build(function (props) {
        expect(props.foo).to.equal('bar111');
      })({
        foo: 'bar'
      });
    };

    expect(run).to["throw"]();
  });
  it('test function with return', function () {
    var a = build(function (props) {
      return props.foo;
    })({
      foo: 'barbar'
    });
    expect(a).to.equal('barbar');
  });
  it('test with stateless function return', function () {
    var func = function func(props) {
      return React.createElement("div", props);
    };

    var a = build(func)({
      foo: 'barbar'
    }); // will return react instance

    expect(a.props.foo).to.equal('barbar');
    expect(isValidElement(a)).to.be["true"];
  });
  it('test function return another component', function () {
    var FakeComponent =
    /*#__PURE__*/
    function (_PureComponent) {
      _inherits(FakeComponent, _PureComponent);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _possibleConstructorReturn(this, _getPrototypeOf(FakeComponent).apply(this, arguments));
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          return React.createElement("div", null, this.props.foo);
        }
      }]);

      return FakeComponent;
    }(PureComponent);

    var func = function func(props) {
      return React.createElement(FakeComponent, props);
    };

    var vDom = build(func)({
      foo: 'bar3'
    });
    var html = shallow(vDom).html();
    expect(html).to.equal('<div>bar3</div>');
  });
  it('test with component', function () {
    var FakeComponent = function FakeComponent(props) {
      return React.createElement("div", null, props.foo);
    };

    var vDom = build(FakeComponent)({
      foo: 'bar'
    });
    var html = shallow(vDom).html();
    expect(html).to.equal('<div>bar</div>');
  });
  it('test with instance', function () {
    var FakeComponent = function FakeComponent(props) {
      return React.createElement("div", null, props.foo);
    };

    var vDom = React.createElement(FakeComponent, null);
    var html = shallow(build(vDom)({
      foo: 'bar1'
    })).html();
    expect(html).to.equal('<div>bar1</div>');
  });
  it('test with class component', function () {
    var FakeComponent =
    /*#__PURE__*/
    function (_PureComponent2) {
      _inherits(FakeComponent, _PureComponent2);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _possibleConstructorReturn(this, _getPrototypeOf(FakeComponent).apply(this, arguments));
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          return React.createElement("div", null, this.props.foo);
        }
      }]);

      return FakeComponent;
    }(PureComponent);

    var vDom = build(FakeComponent)({
      foo: 'bar2'
    });
    var html = shallow(vDom).html();
    expect(html).to.equal('<div>bar2</div>');
  });
  it('test with clone and child', function () {
    var FakeComponent =
    /*#__PURE__*/
    function (_PureComponent3) {
      _inherits(FakeComponent, _PureComponent3);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _possibleConstructorReturn(this, _getPrototypeOf(FakeComponent).apply(this, arguments));
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
              comp = _this$props.comp,
              others = _objectWithoutProperties(_this$props, ["comp"]);

          return build(comp)(others, 'bar');
        }
      }]);

      return FakeComponent;
    }(PureComponent);

    var html = shallow(React.createElement(FakeComponent, {
      id: "foo",
      comp: _ref
    })).html();
    expect(html).to.equal('<div id="foo">bar</div>');
  });
  it('test with func and child', function () {
    var result = build(function (props) {
      return props;
    })({
      foo: 'bar'
    }, 'hello child');
    expect(result.children).to.equal('hello child');
    expect(result.foo).to.equal('bar');
  });
  it('test with anonymous func and child', function () {
    var child = [_ref2, _ref3];
    var buildDom = build(function (_ref4) {
      var children = _ref4.children;
      return React.createElement("div", {
        id: "root"
      }, children);
    })({}, child);
    var html = shallow(React.createElement("div", null, buildDom)).html();

    var stateFunc = function stateFunc(_ref5) {
      var children = _ref5.children;
      return React.createElement("div", {
        id: "root"
      }, children);
    };

    var stateFuncBuildDom = build(stateFunc)({}, child);
    var stateFuncHtml = shallow(React.createElement("div", null, stateFuncBuildDom)).html();
    var expected = '<div><div id="root"><div id="1"></div><div id="2"></div></div></div>';
    expect(html).to.equal(expected);
    expect(stateFuncHtml).to.equal(expected);
  });
  it('test with class and child', function () {
    var FakeComponent =
    /*#__PURE__*/
    function (_PureComponent4) {
      _inherits(FakeComponent, _PureComponent4);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _possibleConstructorReturn(this, _getPrototypeOf(FakeComponent).apply(this, arguments));
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          return React.createElement("div", this.props);
        }
      }]);

      return FakeComponent;
    }(PureComponent);

    var vDom = build(FakeComponent)({
      id: 'foo'
    }, 'hello');
    var html = shallow(vDom).html();
    expect(html).to.equal('<div id="foo">hello</div>');
  });
  it('test with empty', function () {
    var result = build()();
    expect(result).to.be["null"];
  });
  it('test with multi children', function () {
    var FakeDom = function FakeDom(_ref6) {
      var children = _ref6.children;
      return React.createElement("div", null, build(children)({
        title: 'foo'
      }));
    };

    var vDom = React.createElement(FakeDom, null, _ref7, _ref8);
    var wrap = shallow(vDom);
    expect(wrap.html()).to.equal('<div><div title="foo">1</div><div title="foo">2</div></div>');
  });
  it('test with multi function', function () {
    var FakeDom = function FakeDom(_ref9) {
      var children = _ref9.children;
      expect(Children.count(children)).to.equal(2);
      return React.createElement("div", null, build(children)({
        foo: _ref10,
        bar: _ref11
      }));
    };

    var vDom = React.createElement(FakeDom, null, function (_ref12) {
      var foo = _ref12.foo;
      return foo;
    }, _ref13, _ref14, function (_ref15) {
      var bar = _ref15.bar;
      return bar;
    });
    var wrap = shallow(vDom);
    expect(wrap.html()).to.equal('<div><div>foo</div><div foo="[object Object]" bar="[object Object]"></div><div foo="[object Object]" bar="[object Object]"></div><div>bar</div></div>');
  });
  it('test with multi Component instance', function () {
    var FakeDom = function FakeDom(_ref16) {
      var children = _ref16.children;
      expect(Children.count(children)).to.equal(2);
      return React.createElement("div", null, build(children)({
        foo: _ref17,
        bar: _ref18
      }));
    };

    var A = function A(_ref19) {
      var foo = _ref19.foo;
      return foo;
    };

    var B = function B(_ref20) {
      var bar = _ref20.bar;
      return bar;
    };

    var vDom = React.createElement(FakeDom, null, A, _ref21, _ref22, B);
    var wrap = shallow(vDom);
    expect(wrap.html()).to.equal('<div><div>foo</div><div foo="[object Object]" bar="[object Object]"></div><div foo="[object Object]" bar="[object Object]"></div><div>bar</div></div>');
  });
});