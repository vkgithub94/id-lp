"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("reshow-runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("reshow-runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _classLib = require("class-lib");

var _Content = _interopRequireDefault(require("../molecules/Content"));

var _SemanticUI = _interopRequireDefault(require("../molecules/SemanticUI"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Dimmer = function Dimmer(props) {
  var className = props.className,
      show = props.show,
      children = props.children,
      center = props.center,
      content = props.content,
      contentStyle = props.contentStyle,
      isModal = props.isModal,
      others = (0, _objectWithoutProperties2["default"])(props, ["className", "show", "children", "center", "content", "contentStyle", "isModal"]);

  if (!show) {
    return null;
  }

  var classes = (0, _classLib.mixClass)(className, 'transition visible active', {
    dimmer: !isModal,
    modal: isModal
  });
  var child;

  if (center && content) {
    child = _react["default"].createElement(_Content["default"], {
      style: _objectSpread({
        boxSizing: 'inherit'
      }, contentStyle)
    }, children);
  } else {
    child = children;
  }

  return _react["default"].createElement(_SemanticUI["default"], (0, _extends2["default"])({}, others, {
    className: classes
  }), child);
};

Dimmer.defaultProps = {
  show: false,
  isModal: false,
  center: true,
  content: true // same with center attriube, just let user not confuse 

};
var _default = Dimmer;
exports["default"] = _default;
module.exports = exports.default;