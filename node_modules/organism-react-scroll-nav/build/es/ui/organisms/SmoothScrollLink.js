import _extends from "reshow-runtime/es/helpers/extends";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _possibleConstructorReturn from "reshow-runtime/es/helpers/possibleConstructorReturn";
import _getPrototypeOf from "reshow-runtime/es/helpers/getPrototypeOf";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { PureComponent } from 'react';
import smoothScrollTo from 'smooth-scroll-to';
import getOffset from 'getoffset';
import { ScrollReceiver } from '../../src/index';
import scrollStore from '../../src/stores/scrollStore';
import fastScrollStore from '../../src/stores/fastScrollStore';
var scollTimer = null;

var resetTimer = function resetTimer() {
  if (scollTimer) {
    clearTimeout(scollTimer);
    scollTimer = false;
  }
};

var SmoothScrollLink =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(SmoothScrollLink, _PureComponent);

  function SmoothScrollLink() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, SmoothScrollLink);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SmoothScrollLink)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      scrollRefElement: null
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      var props = _this.props;

      var store = _this.useStore();

      var preventDefault = props.preventDefault,
          targetId = props.targetId;
      var scrollRefElement = _this.state.scrollRefElement;

      if (preventDefault) {
        e.preventDefault();
      }

      resetTimer();
      var offset = store.getOffset(targetId);

      if (offset) {
        var margin = _this.getMargin(props, scrollRefElement);

        scollTimer = true;
        smoothScrollTo(offset.top - margin, null, null, function () {
          if (true !== scollTimer) {
            return;
          }

          scollTimer = setTimeout(function () {
            margin = _this.getMargin(props, scrollRefElement);
            offset = store.getOffset(targetId);
            smoothScrollTo(offset.top - margin, 100);
          }, 500);
        });
      }
    });

    return _this;
  }

  _createClass(SmoothScrollLink, [{
    key: "useStore",
    value: function useStore() {
      var noDelay = this.props.noDelay;
      return noDelay ? fastScrollStore : scrollStore;
    }
  }, {
    key: "getMargin",
    value: function getMargin(props, ref) {
      var scrollRefLoc = props.scrollRefLoc,
          scrollMargin = props.scrollMargin;
      var margin = 0;

      if (ref) {
        var refOffset = getOffset(ref, false);

        switch (scrollRefLoc) {
          case 'bottom':
            margin += refOffset.bottom - refOffset.top;
            break;

          default:
          case 'top':
            break;
        }
      }

      if (!isNaN(scrollMargin)) {
        margin += scrollMargin;
      }

      margin--;
      return margin;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var dom = document.getElementById(this.props.scrollRefId);

      if (dom) {
        this.setState({
          scrollRefElement: dom
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      resetTimer();
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;

      var targetId = props.targetId,
          scrollRefLoc = props.scrollRefLoc,
          scrollMargin = props.scrollMargin,
          scrollRefId = props.scrollRefId,
          style = props.style,
          preventDefault = props.preventDefault,
          others = _objectWithoutProperties(props, ["targetId", "scrollRefLoc", "scrollMargin", "scrollRefId", "style", "preventDefault"]);

      var scrollRefElement = this.state.scrollRefElement;
      var margin = this.getMargin(props, scrollRefElement);
      return React.createElement(ScrollReceiver, _extends({
        atom: "a"
      }, others, {
        targetId: targetId,
        scrollMargin: margin,
        style: _objectSpread({}, Styles.link, {}, style),
        onClick: this.handleClick
      }));
    }
  }]);

  return SmoothScrollLink;
}(PureComponent);

_defineProperty(SmoothScrollLink, "defaultProps", {
  scrollRefId: '',
  scrollRefLoc: 'bottom',
  preventDefault: true,
  noDelay: false
});

export default SmoothScrollLink;
var Styles = {
  link: {
    cursor: 'pointer'
  }
};