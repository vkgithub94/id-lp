import _objectSpread from "reshow-runtime/es/helpers/objectSpread";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import getScrollInfo from 'get-scroll-info';
import getOffset from 'getoffset';
import isOnScreen from './isOnScreen';
import isFixed from './isFixed';
import isSetOverflow from './isSetOverflow';

var calWindowOffset = function calWindowOffset(domInfo, scrollInfo) {
  var _distanceFlip;

  var distance = {};
  distance.top = domInfo.top - scrollInfo.top;
  distance.right = scrollInfo.right - domInfo.right;
  distance.bottom = scrollInfo.bottom - domInfo.bottom;
  distance.left = domInfo.left - scrollInfo.left;
  var distanceFlip = (_distanceFlip = {}, _defineProperty(_distanceFlip, distance.top, 't'), _defineProperty(_distanceFlip, distance.right, 'r'), _defineProperty(_distanceFlip, distance.bottom, 'b'), _defineProperty(_distanceFlip, distance.left, 'l'), _distanceFlip);
  var maxDistance = Math.max(distance.top, distance.right, distance.bottom, distance.left);
  var firstKey = distanceFlip[maxDistance];
  var secondKey;
  var locs = [firstKey + 'c'];

  if (firstKey === 't' || firstKey === 'b') {
    var _distanceFlip2;

    distanceFlip = (_distanceFlip2 = {}, _defineProperty(_distanceFlip2, distance.right, 'r'), _defineProperty(_distanceFlip2, distance.left, 'l'), _distanceFlip2);
    secondKey = distanceFlip[Math.max(distance.left, distance.right)];
  } else {
    var _distanceFlip3;

    distanceFlip = (_distanceFlip3 = {}, _defineProperty(_distanceFlip3, distance.top, 't'), _defineProperty(_distanceFlip3, distance.bottom, 'b'), _distanceFlip3);
    secondKey = firstKey;
    firstKey = distanceFlip[Math.max(distance.top, distance.bottom)];
  }

  locs.push(firstKey + secondKey);
  locs.push(secondKey + firstKey);
  var tb = firstKey;
  var lr = secondKey;
  return {
    locs: locs,
    tb: tb,
    lr: lr
  };
};

var getWindowOffset = function getWindowOffset(dom) {
  if (!dom) {
    console.error('getWindowOffset not assign dom');
    console.trace();
    return false;
  }

  var fixedNode = isFixed(dom);
  var scrollNode = isSetOverflow(dom);
  var scrollInfo = getScrollInfo();

  var cookScrollInfo = _objectSpread({}, scrollInfo);

  if (fixedNode) {
    var fixedScrollInfo = getScrollInfo(fixedNode);
    cookScrollInfo.top = fixedScrollInfo.top;
    cookScrollInfo.right = scrollInfo.scrollNodeWidth;
    cookScrollInfo.bottom = scrollInfo.scrollNodeHeight;
    cookScrollInfo.left = fixedScrollInfo.left;
  } else if (scrollNode) {
    var scrollNodeScrollInfo = getScrollInfo(scrollNode);
    cookScrollInfo.top += scrollNodeScrollInfo.top;
    cookScrollInfo.right += scrollNodeScrollInfo.left;
    cookScrollInfo.bottom += scrollNodeScrollInfo.top;
    cookScrollInfo.left += scrollNodeScrollInfo.left;
  }

  var domInfo = isOnScreen(getOffset(dom, fixedNode), cookScrollInfo);
  domInfo.fixedNode = fixedNode;
  domInfo.scrollNode = scrollNode;

  if (!domInfo.isOnScreen) {
    console.warn('Dom is not in screen', {
      dom: dom,
      domInfo: domInfo,
      scrollInfo: scrollInfo,
      cookScrollInfo: cookScrollInfo
    });
    return false;
  }

  var result = _objectSpread({
    domInfo: domInfo,
    scrollInfo: scrollInfo
  }, calWindowOffset(domInfo, cookScrollInfo));

  return result;
};

export default getWindowOffset;