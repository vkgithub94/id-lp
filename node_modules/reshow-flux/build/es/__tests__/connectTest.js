import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import _extends from "reshow-runtime/es/helpers/extends";
import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _possibleConstructorReturn from "reshow-runtime/es/helpers/possibleConstructorReturn";
import _getPrototypeOf from "reshow-runtime/es/helpers/getPrototypeOf";
import _inherits from "reshow-runtime/es/helpers/inherits";
import React, { Component, StrictMode } from 'react';
import { connect, Dispatcher, ReduceStore } from '../index';
import { expect } from 'chai';
import { shallow, mount, configure } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
configure({
  adapter: new Adapter()
});
describe('Test Connect', function () {
  var FakeStore =
  /*#__PURE__*/
  function (_ReduceStore) {
    _inherits(FakeStore, _ReduceStore);

    function FakeStore() {
      _classCallCheck(this, FakeStore);

      return _possibleConstructorReturn(this, _getPrototypeOf(FakeStore).apply(this, arguments));
    }

    _createClass(FakeStore, [{
      key: "getInitialState",
      value: function getInitialState() {
        return [];
      }
    }, {
      key: "reduce",
      value: function reduce(state, action) {
        return action;
      }
    }]);

    return FakeStore;
  }(ReduceStore);

  var dispatcher;
  var store;
  beforeEach(function () {
    dispatcher = new Dispatcher();
    store = new FakeStore(dispatcher);
  });
  it('could register with store', function () {
    var FakeComponent =
    /*#__PURE__*/
    function (_Component) {
      _inherits(FakeComponent, _Component);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _possibleConstructorReturn(this, _getPrototypeOf(FakeComponent).apply(this, arguments));
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          return React.createElement("div", null, this.state.foo);
        }
      }], [{
        key: "getStores",
        value: function getStores() {
          return [store];
        }
      }, {
        key: "calculateState",
        value: function calculateState(prevState) {
          return {
            foo: 'bar'
          };
        }
      }]);

      return FakeComponent;
    }(Component);

    var FakeConnected = connect(FakeComponent);
    var vDom = React.createElement(FakeConnected, null);
    var actual = shallow(vDom).html();
    expect(actual).to.equal('<div>bar</div>');
  });
  it('could work with dispatcher', function () {
    var calculateTimes = 0;

    var FakeComponent =
    /*#__PURE__*/
    function (_Component2) {
      _inherits(FakeComponent, _Component2);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _possibleConstructorReturn(this, _getPrototypeOf(FakeComponent).apply(this, arguments));
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          return React.createElement("div", null, this.state.aaa);
        }
      }], [{
        key: "getStores",
        value: function getStores() {
          return [store];
        }
      }, {
        key: "calculateState",
        value: function calculateState(prevState) {
          var state = store.getState();
          calculateTimes++;
          return {
            aaa: state.aaa
          };
        }
      }]);

      return FakeComponent;
    }(Component);

    var FakeConnected = connect(FakeComponent);
    expect(calculateTimes).to.equal(0);
    var vDom = React.createElement(FakeConnected, null);
    expect(calculateTimes).to.equal(0);
    var html = shallow(vDom);
    expect(calculateTimes).to.equal(1);
    dispatcher.dispatch({
      aaa: 'Hello dispatcher!'
    });
    html.update();
    expect(calculateTimes).to.equal(2);
    expect(html.html()).to.equal('<div>Hello dispatcher!</div>');
    html.unmount();
    dispatcher.dispatch({
      aaa: 'Hello Unmount!'
    });
    expect(calculateTimes).to.equal(2);
  });
  it('could work withProps', function () {
    var getStoresProps = null;
    var calculateStateProps = null;

    var FakeComponent =
    /*#__PURE__*/
    function (_Component3) {
      _inherits(FakeComponent, _Component3);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _possibleConstructorReturn(this, _getPrototypeOf(FakeComponent).apply(this, arguments));
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          return React.createElement("div", null, this.state.foo);
        }
      }], [{
        key: "getStores",
        value: function getStores(props) {
          getStoresProps = props;
          return [store];
        }
      }, {
        key: "calculateState",
        value: function calculateState(prevState, props) {
          calculateStateProps = props;
          var state = store.getState();
          return {
            foo: props.foo
          };
        }
      }]);

      return FakeComponent;
    }(Component);

    var FakeConnected = connect(FakeComponent, {
      withProps: true
    });
    var changeFoo;

    var Parent =
    /*#__PURE__*/
    function (_Component4) {
      _inherits(Parent, _Component4);

      function Parent(props) {
        var _this;

        _classCallCheck(this, Parent);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(Parent).call(this, props));

        changeFoo = function changeFoo(v) {
          _this.setState({
            foo: v
          });
        };

        return _this;
      }

      _createClass(Parent, [{
        key: "render",
        value: function render() {
          var foo = null;

          if (this.state && this.state.foo) {
            foo = this.state.foo;
          }

          return React.createElement(FakeConnected, {
            foo: foo
          });
        }
      }]);

      return Parent;
    }(Component);

    var vDom = React.createElement(Parent, null);
    var html = mount(vDom);
    expect(getStoresProps).to.deep.equal({
      foo: null
    });
    expect(calculateStateProps).to.deep.equal({
      foo: null
    });
    changeFoo('bar');
    expect(html.html()).to.equal('<div>bar</div>');
    expect(getStoresProps).to.deep.equal({
      foo: 'bar'
    });
    expect(calculateStateProps).to.deep.equal({
      foo: 'bar'
    });
  });
  it('could work with getDerivedStateFromProps override', function () {
    var FakeComponent =
    /*#__PURE__*/
    function (_Component5) {
      _inherits(FakeComponent, _Component5);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _possibleConstructorReturn(this, _getPrototypeOf(FakeComponent).apply(this, arguments));
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          return React.createElement("div", null, this.state.foo);
        }
      }], [{
        key: "getStores",
        value: function getStores(props) {
          return [store];
        }
      }, {
        key: "calculateState",
        value: function calculateState(prevState, props) {
          var state = store.getState();
          return _objectSpread({}, props, {
            testMerge: prevState.testMerge + 1
          });
        }
      }, {
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          var keys = Object.keys;
          return {
            testMerge: prevState.testMerge || 0,
            kProps: keys(nextProps),
            kState: keys(prevState)
          };
        }
      }]);

      return FakeComponent;
    }(Component);

    var FakeConnected = connect(FakeComponent, {
      withProps: true
    });
    var change1;
    var change2;
    var child1;
    var child2;

    var Parent =
    /*#__PURE__*/
    function (_Component6) {
      _inherits(Parent, _Component6);

      function Parent(props) {
        var _this2;

        _classCallCheck(this, Parent);

        _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Parent).call(this, props));

        change1 = function change1(v) {
          return _this2.setState({
            child1: v
          });
        };

        change2 = function change2(v) {
          return _this2.setState({
            child2: v
          });
        };

        _this2.state = {};
        return _this2;
      }

      _createClass(Parent, [{
        key: "render",
        value: function render() {
          return React.createElement("div", null, React.createElement(FakeConnected, _extends({}, this.state.child1, {
            ref: function ref(el) {
              return child1 = el;
            }
          })), React.createElement(FakeConnected, _extends({}, this.state.child2, {
            ref: function ref(el) {
              return child2 = el;
            }
          })));
        }
      }]);

      return Parent;
    }(Component);

    var vDom = React.createElement(Parent, null);
    var html = mount(vDom);
    expect(child1.state).to.deep.equal({
      kProps: [],
      kState: [],
      testMerge: 1
    });
    expect(child2.state).to.deep.equal({
      kProps: [],
      kState: [],
      testMerge: 1
    });
    change1({
      foo: 'bar'
    });
    expect(child1.state).to.deep.equal({
      kProps: ['foo'],
      kState: ['testMerge', 'kProps', 'kState'],
      foo: 'bar',
      testMerge: 2
    });
    change2({
      bar: 'foo'
    });
    expect(child2.state).to.deep.equal({
      kProps: ['bar'],
      kState: ['testMerge', 'kProps', 'kState'],
      bar: 'foo',
      testMerge: 3
    });
  });
  it('could work withConstructor equal true', function () {
    var FakeComponent =
    /*#__PURE__*/
    function (_Component7) {
      _inherits(FakeComponent, _Component7);

      function FakeComponent() {
        var _getPrototypeOf2;

        var _this3;

        _classCallCheck(this, FakeComponent);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this3 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FakeComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

        _defineProperty(_assertThisInitialized(_this3), "didMount", false);

        return _this3;
      }

      _createClass(FakeComponent, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.didMount = true;
        }
      }, {
        key: "render",
        value: function render() {
          return React.createElement("div", null, this.state.foo);
        }
      }], [{
        key: "getStores",
        value: function getStores() {
          return [store];
        }
      }, {
        key: "calculateState",
        value: function calculateState(prevState) {
          return {
            foo: 'bar'
          };
        }
      }]);

      return FakeComponent;
    }(Component);

    var FakeConnected = connect(FakeComponent);
    var vDom = React.createElement(FakeConnected, {
      withConstructor: true
    });
    var html = shallow(vDom, {
      disableLifecycleMethods: true
    });
    var instance = html.instance();
    expect(instance.didMount).to.equal(false);
    expect(instance.__stores).to.have.lengthOf(1);
  });
  it('could work withConstructor equal false', function () {
    var FakeComponent =
    /*#__PURE__*/
    function (_Component8) {
      _inherits(FakeComponent, _Component8);

      function FakeComponent() {
        var _getPrototypeOf3;

        var _this4;

        _classCallCheck(this, FakeComponent);

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        _this4 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(FakeComponent)).call.apply(_getPrototypeOf3, [this].concat(args)));

        _defineProperty(_assertThisInitialized(_this4), "didMount", false);

        return _this4;
      }

      _createClass(FakeComponent, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.didMount = true;
        }
      }, {
        key: "render",
        value: function render() {
          return React.createElement("div", null, this.state.foo);
        }
      }], [{
        key: "getStores",
        value: function getStores() {
          return [store];
        }
      }, {
        key: "calculateState",
        value: function calculateState(prevState) {
          return {
            foo: 'bar'
          };
        }
      }]);

      return FakeComponent;
    }(Component);

    var FakeConnected = connect(FakeComponent);
    var vDom = React.createElement(FakeConnected, null);
    var html = shallow(vDom);
    var instance = html.instance();
    expect(instance.didMount).to.equal(true);
    expect(instance.__stores).to.have.lengthOf(1);
  });
  it('could work with empty calculateState', function () {
    var FakeComponent =
    /*#__PURE__*/
    function (_Component9) {
      _inherits(FakeComponent, _Component9);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _possibleConstructorReturn(this, _getPrototypeOf(FakeComponent).apply(this, arguments));
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          return React.createElement("div", null, this.state.foo);
        }
      }], [{
        key: "getStores",
        value: function getStores() {
          return [store];
        }
      }, {
        key: "calculateState",
        value: function calculateState(prevState) {}
      }]);

      return FakeComponent;
    }(Component);

    var FakeConnected = connect(FakeComponent);
    var vDom = React.createElement(FakeConnected, null);
    var html = shallow(vDom);
    var state = html.state();
    expect(state).to.be.empty;
  });
});