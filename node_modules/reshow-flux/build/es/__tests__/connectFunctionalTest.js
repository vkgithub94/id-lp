'use strict';

import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _possibleConstructorReturn from "reshow-runtime/es/helpers/possibleConstructorReturn";
import _getPrototypeOf from "reshow-runtime/es/helpers/getPrototypeOf";
import _inherits from "reshow-runtime/es/helpers/inherits";
import React from 'react';
import { connectFunctional, Dispatcher, ReduceStore } from '../index';
import { expect } from 'chai';
import { shallow, configure } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
configure({
  adapter: new Adapter()
});
describe('Test Connect Functional', function () {
  var FakeStore =
  /*#__PURE__*/
  function (_ReduceStore) {
    _inherits(FakeStore, _ReduceStore);

    function FakeStore() {
      _classCallCheck(this, FakeStore);

      return _possibleConstructorReturn(this, _getPrototypeOf(FakeStore).apply(this, arguments));
    }

    _createClass(FakeStore, [{
      key: "getInitialState",
      value: function getInitialState() {
        return [];
      }
    }, {
      key: "reduce",
      value: function reduce(state, action) {
        return action;
      }
    }]);

    return FakeStore;
  }(ReduceStore);

  var dispatcher = new Dispatcher();
  var store = new FakeStore(dispatcher);
  it('could register with store', function () {
    var FakeComponent = function FakeComponent(_ref) {
      var aaa = _ref.aaa;
      return React.createElement("div", null, aaa);
    };

    var fakeGetStores = function fakeGetStores() {
      return [store];
    };

    var fakeCalculateState = function fakeCalculateState(prevState) {
      var state = store.getState();
      return {
        aaa: state.aaa
      };
    };

    var FakeConnected = connectFunctional(FakeComponent, fakeGetStores, fakeCalculateState);
    var vDom = React.createElement(FakeConnected, null);
    var html = shallow(vDom);
    dispatcher.dispatch({
      aaa: 'Hello dispatcher!'
    });
    html.update();
    expect(html.html()).to.equal('<div>Hello dispatcher!</div>');
  });
});