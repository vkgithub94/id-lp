import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _possibleConstructorReturn from "reshow-runtime/es/helpers/possibleConstructorReturn";
import _getPrototypeOf from "reshow-runtime/es/helpers/getPrototypeOf";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { Component, isValidElement } from 'react';
import { connect } from 'reshow-flux';
import { build, SemanticUI } from 'react-atomic-molecule';
import scrollStore from '../../src/stores/scrollStore';
import fastScrollStore from '../../src/stores/fastScrollStore';

var ScrollReceiver =
/*#__PURE__*/
function (_Component) {
  _inherits(ScrollReceiver, _Component);

  function ScrollReceiver() {
    _classCallCheck(this, ScrollReceiver);

    return _possibleConstructorReturn(this, _getPrototypeOf(ScrollReceiver).apply(this, arguments));
  }

  _createClass(ScrollReceiver, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          atom = _this$props.atom,
          container = _this$props.container,
          scrollMargin = _this$props.scrollMargin,
          targetId = _this$props.targetId,
          isScrollReceiver = _this$props.isScrollReceiver,
          noDelay = _this$props.noDelay,
          children = _this$props.children,
          resetProps = _objectWithoutProperties(_this$props, ["atom", "container", "scrollMargin", "targetId", "isScrollReceiver", "noDelay", "children"]);

      if (!container) {
        return React.createElement(SemanticUI, resetProps, children);
      }

      var targetInfo = _objectSpread({}, this.state, {
        targetId: targetId
      });

      var thisChildren = children;

      if (!thisChildren && isValidElement(container)) {
        thisChildren = container.props.children;
      }

      return build(container)(_objectSpread({}, resetProps, {
        targetInfo: targetInfo
      }), thisChildren);
    }
  }], [{
    key: "getStores",
    value: function getStores(props) {
      return props.noDelay ? [fastScrollStore] : [scrollStore];
    }
  }, {
    key: "calculateState",
    value: function calculateState(prevState, props) {
      var noDelay = props.noDelay,
          targetId = props.targetId,
          scrollMargin = props.scrollMargin;
      var store = noDelay ? fastScrollStore : scrollStore;
      var state = store.getState();
      var isShown = prevState && prevState.isShown || false;
      var pos = store.getOffset(targetId, store.storeName) || {};
      var scrollInfo = store.getMap('scroll');
      var scrollTop = scrollInfo.top;

      if (pos.isOnScreen) {
        isShown = true;
      }

      var active = 'undefined' !== typeof targetId && targetId === state.get('m' + scrollMargin);

      if (!isNaN(scrollMargin)) {
        store.addMargin(scrollMargin);
      }

      return _objectSpread({}, pos, {
        active: active,
        scrollTop: scrollTop,
        scrollInfo: scrollInfo,
        isShown: isShown
      });
    }
  }]);

  return ScrollReceiver;
}(Component);

_defineProperty(ScrollReceiver, "defaultProps", {
  scrollMargin: 'default',
  isScrollReceiver: true,
  noDelay: false
});

export default connect(ScrollReceiver, {
  withProps: true
});