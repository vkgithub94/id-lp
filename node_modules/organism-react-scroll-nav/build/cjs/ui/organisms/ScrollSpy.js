"use strict";

var _interopRequireWildcard = require("reshow-runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("reshow-runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("reshow-runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("reshow-runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("reshow-runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("reshow-runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("reshow-runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("reshow-runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _reactAtomicMolecule = require("react-atomic-molecule");

var _scrollStore = _interopRequireDefault(require("../../src/stores/scrollStore"));

var _fastScrollStore = _interopRequireDefault(require("../../src/stores/fastScrollStore"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _ref =
/*#__PURE__*/
_react["default"].createElement(_reactAtomicMolecule.SemanticUI, null);

var ScrollSpy =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2["default"])(ScrollSpy, _PureComponent);

  function ScrollSpy() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, ScrollSpy);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(ScrollSpy)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {});
    return _this;
  }

  (0, _createClass2["default"])(ScrollSpy, [{
    key: "getOffsetEl",
    value: function getOffsetEl() {
      if (this.el) {
        return this.el;
      } else {
        console.warn('Please use SemanticUI. props.container -> import {SemanticUI} from "react-atomic-molecule"');
      }
    }
  }, {
    key: "useStore",
    value: function useStore() {
      var noDelay = this.props.noDelay;
      return noDelay ? _fastScrollStore["default"] : _scrollStore["default"];
    }
  }, {
    key: "attach",
    value: function attach() {
      if (this.useStore().hasAttach(this)) {
        return this.state.id;
      }

      var id = this.useStore().attach(this);
      this.setState({
        id: id
      });
      return id;
    }
  }, {
    key: "detach",
    value: function detach() {
      return this.useStore().detach(this);
    }
  }, {
    key: "isScrollReceiver",
    value: function isScrollReceiver(el) {
      if ((0, _getObjectValue["default"])(el, ['props', 'isScrollReceiver'])) {
        return true;
      }

      return false;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.attach();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.detach();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      /**
       * monitorScroll use in store, in component just for reset props.
       */
      var _this$props = this.props,
          className = _this$props.className,
          monitorScroll = _this$props.monitorScroll,
          children = _this$props.children,
          container = _this$props.container,
          noDelay = _this$props.noDelay,
          others = (0, _objectWithoutProperties2["default"])(_this$props, ["className", "monitorScroll", "children", "container", "noDelay"]);
      var isScrollReceiver = this.isScrollReceiver(children);
      var targetId = this.state.id;
      var classes = (0, _reactAtomicMolecule.mixClass)(className, 'spy-tar-' + targetId);
      var cookChildren;
      var thisContainer;
      var thisProps;

      if (isScrollReceiver) {
        thisContainer = children;
        thisProps = _objectSpread({}, others, {}, children.props, {
          className: classes,
          targetId: targetId,
          container: container,
          noDelay: noDelay
        });
      } else {
        thisProps = _objectSpread({
          children: children,
          className: classes
        }, others);

        if (container) {
          thisContainer = container;
        } else {
          thisContainer = _ref;
        }
      }

      thisProps = _objectSpread({}, thisProps, {
        refCb: function refCb(el) {
          return _this2.el = el;
        }
      });
      return _react["default"].cloneElement(thisContainer, thisProps);
    }
  }]);
  return ScrollSpy;
}(_react.PureComponent);

(0, _defineProperty2["default"])(ScrollSpy, "defaultProps", {
  monitorScroll: true,
  noDelay: false
});
var _default = ScrollSpy;
exports["default"] = _default;
module.exports = exports.default;