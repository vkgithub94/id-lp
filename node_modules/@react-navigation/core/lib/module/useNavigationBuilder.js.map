{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["React","isValidElementType","NavigationStateContext","NavigationRouteContext","Screen","navigate","useEventEmitter","useRegisterNavigator","useDescriptors","useNavigationHelpers","useOnAction","useFocusEvents","useOnRouteFocus","useChildActionListeners","useFocusedListeners","useFocusedListenersChildrenAdapter","PrivateValueStore","useStateGetters","useOnGetState","isArrayEqual","a","b","length","every","it","index","getRouteConfigsFromChildren","children","configs","Children","toArray","reduce","acc","child","isValidElement","type","push","props","Fragment","Error","name","String","process","env","NODE_ENV","forEach","config","component","JSON","stringify","undefined","console","warn","useNavigationBuilder","createRouter","options","route","useContext","previousRouteRef","useRef","useEffect","current","rest","params","screen","initialRouteName","router","screens","curr","routeNames","Object","keys","routeParamList","initialParams","initialParamsFromParams","isStateValid","useCallback","state","isStateInitialized","stale","currentState","getCurrentState","getState","setState","key","performTransaction","previousStateRef","initializedStateRef","getInitialState","getRehydratedState","nextState","getStateForRouteNamesChange","updatedState","getStateForAction","emitter","emit","data","actionListeners","listeners","addActionListener","addListener","focusedListeners","addFocusedListener","getStateForRoute","addStateGetter","onAction","routerConfigOptions","onRouteFocus","navigation","descriptors","screenOptions"],"mappings":"6/BAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,kBAAT,KAAmC,UAAnC,CACA,OAASC,sBAAT,KAAuC,2BAAvC,CACA,MAAOC,CAAAA,sBAAP,KAAmC,0BAAnC,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,oBAAP,KAAiC,wBAAjC,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,oBAAP,KAAiC,wBAAjC,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,uBAAP,KAAoC,2BAApC,CACA,MAAOC,CAAAA,mBAAP,KAAgC,uBAAhC,CACA,MAAOC,CAAAA,kCAAP,KAA+C,sCAA/C,CACA,OASEC,iBATF,KAWO,SAXP,CAYA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAIAF,iBAAiB,CAajB,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAWC,CAAX,QACnBD,CAAAA,CAAC,CAACE,MAAF,GAAaD,CAAC,CAACC,MAAf,EAAyBF,CAAC,CAACG,KAAF,CAAQ,SAACC,EAAD,CAAKC,KAAL,QAAeD,CAAAA,EAAE,GAAKH,CAAC,CAACI,KAAD,CAAvB,EAAR,CADN,EAArB,CAQA,GAAMC,CAAAA,2BAA2B,CAAG,QAA9BA,CAAAA,2BAA8B,CAClCC,QADkC,CAE/B,CACH,GAAMC,CAAAA,OAAO,CAAG5B,KAAK,CAAC6B,QAAN,CAAeC,OAAf,CAAuBH,QAAvB,EAAiCI,MAAjC,CAEd,SAACC,GAAD,CAAMC,KAAN,CAAgB,CAChB,GAAIjC,KAAK,CAACkC,cAAN,CAAqBD,KAArB,CAAJ,CAAiC,CAC/B,GAAIA,KAAK,CAACE,IAAN,GAAe/B,MAAnB,CAA2B,CAGzB4B,GAAG,CAACI,IAAJ,CACEH,KAAK,CAACI,KADR,EAGA,MAAOL,CAAAA,GAAP,CACD,CAED,GAAIC,KAAK,CAACE,IAAN,GAAenC,KAAK,CAACsC,QAAzB,CAAmC,CAGjCN,GAAG,CAACI,IAAJ,OAAAJ,GAAG,oBACEN,2BAA2B,CAAgBO,KAAK,CAACI,KAAN,CAAYV,QAA5B,CAD7B,EAAH,CAGA,MAAOK,CAAAA,GAAP,CACD,CACF,CAED,KAAM,IAAIO,CAAAA,KAAJ,qFAGFN,KAAK,CAACE,IAAN,EAAcF,KAAK,CAACE,IAAN,CAAWK,IAAzB,CAAgCP,KAAK,CAACE,IAAN,CAAWK,IAA3C,CAAkDC,MAAM,CAACR,KAAD,CAHtD,OAAN,CAMD,CA7Be,CA6Bb,EA7Ba,CAAhB,CA+BA,GAAIS,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzChB,OAAO,CAACiB,OAAR,CAAgB,SAAAC,MAAM,CAAI,UACcA,MADd,CAChBN,IADgB,MAChBA,IADgB,CACVb,QADU,MACVA,QADU,CACAoB,SADA,MACAA,SADA,CAGxB,GAAI,MAAOP,CAAAA,IAAP,GAAgB,QAAhB,EAA4B,CAACA,IAAjC,CAAuC,CACrC,KAAM,IAAID,CAAAA,KAAJ,yBACoBS,IAAI,CAACC,SAAL,CACtBT,IADsB,CADpB,oDAAN,CAKD,CAED,GAAIb,QAAQ,EAAI,IAAZ,EAAoBoB,SAAS,GAAKG,SAAtC,CAAiD,CAC/C,GAAIvB,QAAQ,EAAI,IAAZ,EAAoBoB,SAAS,GAAKG,SAAtC,CAAiD,CAC/C,KAAM,IAAIX,CAAAA,KAAJ,8DACyDC,IADzD,sCAAN,CAGD,CAED,GAAIb,QAAQ,EAAI,IAAZ,EAAoB,MAAOA,CAAAA,QAAP,GAAoB,UAA5C,CAAwD,CACtD,KAAM,IAAIY,CAAAA,KAAJ,6DACwDC,IADxD,uDAAN,CAGD,CAED,GAAIO,SAAS,GAAKG,SAAd,EAA2B,CAACjD,kBAAkB,CAAC8C,SAAD,CAAlD,CAA+D,CAC7D,KAAM,IAAIR,CAAAA,KAAJ,8DACyDC,IADzD,4CAAN,CAGD,CAED,GAAI,MAAOO,CAAAA,SAAP,GAAqB,UAArB,EAAmCA,SAAS,CAACP,IAAV,GAAmB,WAA1D,CAAuE,CAIrEW,OAAO,CAACC,IAAR,sFACuFZ,IADvF,0RAGD,CACF,CA3BD,IA2BO,CACL,KAAM,IAAID,CAAAA,KAAJ,mEAC8DC,IAD9D,uLAAN,CAGD,CACF,CA3CD,EA4CD,CAED,MAAOZ,CAAAA,OAAP,CACD,CAlFD,CA2FA,cAAe,SAASyB,CAAAA,oBAAT,CAMbC,YANa,CAObC,OAPa,CAQb,CACAhD,oBAAoB,GAEpB,GAAMiD,CAAAA,KAAK,CAAGxD,KAAK,CAACyD,UAAN,CAAiBtD,sBAAjB,CAAd,CAIA,GAAMuD,CAAAA,gBAAgB,CAAG1D,KAAK,CAAC2D,MAAN,CAAaH,KAAb,CAAzB,CAEAxD,KAAK,CAAC4D,SAAN,CAAgB,UAAM,CACpBF,gBAAgB,CAACG,OAAjB,CAA2BL,KAA3B,CACD,CAFD,CAEG,CAACA,KAAD,CAFH,EATA,GAaQ7B,CAAAA,QAbR,CAa8B4B,OAb9B,CAaQ5B,QAbR,CAaqBmC,IAbrB,0BAa8BP,OAb9B,iCAc4BvD,KAAK,CAAC2D,MAAN,CAC1BL,YAAY,kBACLQ,IADK,IAEN,CAAAN,KAAK,MAAL,QAAAA,KAAK,CAAEO,MAAP,GAAiB,MAAOP,CAAAA,KAAK,CAACO,MAAN,CAAaC,MAApB,GAA+B,QAAhD,CACA,CAAEC,gBAAgB,CAAET,KAAK,CAACO,MAAN,CAAaC,MAAjC,CADA,CAEA,IAJM,EADc,CAd5B,CAciBE,MAdjB,eAcQL,OAdR,CAuBA,GAAMM,CAAAA,OAAO,CAAGzC,2BAA2B,CAAgBC,QAAhB,CAA3B,CAAqDI,MAArD,CAEd,SAACC,GAAD,CAAMoC,IAAN,CAAe,CACf,GAAIA,IAAI,CAAC5B,IAAL,GAAaR,CAAAA,GAAjB,CAAsB,CACpB,KAAM,IAAIO,CAAAA,KAAJ,8GACyG6B,IAAI,CAAC5B,IAD9G,MAAN,CAGD,CAEDR,GAAG,CAACoC,IAAI,CAAC5B,IAAN,CAAH,CAAiB4B,IAAjB,CACA,MAAOpC,CAAAA,GAAP,CACD,CAXe,CAWb,EAXa,CAAhB,CAaA,GAAMqC,CAAAA,UAAU,CAAGC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,CAAnB,CACA,GAAMK,CAAAA,cAAc,CAAGH,UAAU,CAACtC,MAAX,CACrB,SAACC,GAAD,CAAMoC,IAAN,CAAe,IACLK,CAAAA,aADK,CACaN,OAAO,CAACC,IAAD,CADpB,CACLK,aADK,CAEb,GAAMC,CAAAA,uBAAuB,CAC3B,CAAAlB,KAAK,MAAL,QAAAA,KAAK,CAAEO,MAAP,GAAiBP,KAAK,CAACO,MAAN,CAAaC,MAAb,GAAwBI,IAAzC,CACIZ,KAAK,CAACO,MAAN,CAAaA,MADjB,CAEIb,SAHN,CAKAlB,GAAG,CAACoC,IAAD,CAAH,CACEK,aAAa,GAAKvB,SAAlB,EAA+BwB,uBAAuB,GAAKxB,SAA3D,kBAESuB,aAFT,IAGSC,uBAHT,EAKIxB,SANN,CAQA,MAAOlB,CAAAA,GAAP,CACD,CAjBoB,CAkBrB,EAlBqB,CAAvB,CAqBA,GAAI,CAACqC,UAAU,CAAC/C,MAAhB,CAAwB,CACtB,KAAM,IAAIiB,CAAAA,KAAJ,CACJ,4FADI,CAAN,CAGD,CAED,GAAMoC,CAAAA,YAAY,CAAG3E,KAAK,CAAC4E,WAAN,CACnB,SAAAC,KAAK,QAAIA,CAAAA,KAAK,CAAC1C,IAAN,GAAee,SAAf,EAA4B2B,KAAK,CAAC1C,IAAN,GAAe+B,MAAM,CAAC/B,IAAtD,EADc,CAEnB,CAAC+B,MAAM,CAAC/B,IAAR,CAFmB,CAArB,CAKA,GAAM2C,CAAAA,kBAAkB,CAAG9E,KAAK,CAAC4E,WAAN,CACzB,SAAAC,KAAK,QACHA,CAAAA,KAAK,GAAK3B,SAAV,EAAuB2B,KAAK,CAACE,KAAN,GAAgB,KAAvC,EAAgDJ,YAAY,CAACE,KAAD,CADzD,EADoB,CAGzB,CAACF,YAAD,CAHyB,CAA3B,CArEA,sBAiFI3E,KAAK,CAACyD,UAAN,CAAiBvD,sBAAjB,CAjFJ,CA4ES8E,YA5ET,mBA4EEH,KA5EF,CA6EYI,eA7EZ,mBA6EEC,QA7EF,CA8EEC,QA9EF,mBA8EEA,QA9EF,CA+EEC,GA/EF,mBA+EEA,GA/EF,CAgFEC,kBAhFF,mBAgFEA,kBAhFF,CAmFA,GAAMC,CAAAA,gBAAgB,CAAGtF,KAAK,CAAC2D,MAAN,EAAzB,CAGA,GAAM4B,CAAAA,mBAAmB,CAAGvF,KAAK,CAAC2D,MAAN,EAA5B,CAEA,GACE4B,mBAAmB,CAAC1B,OAApB,GAAgCX,SAAhC,EACA8B,YAAY,GAAKM,gBAAgB,CAACzB,OAFpC,CAGE,CAKA0B,mBAAmB,CAAC1B,OAApB,CACEmB,YAAY,GAAK9B,SAAjB,EAA8B,CAACyB,YAAY,CAACK,YAAD,CAA3C,CACId,MAAM,CAACsB,eAAP,CAAuB,CACrBnB,UAAU,CAAVA,UADqB,CAErBG,cAAc,CAAdA,cAFqB,CAAvB,CADJ,CAKIN,MAAM,CAACuB,kBAAP,CAA0BT,YAA1B,CAA+D,CAC7DX,UAAU,CAAVA,UAD6D,CAE7DG,cAAc,CAAdA,cAF6D,CAA/D,CANN,CAUD,CAEDxE,KAAK,CAAC4D,SAAN,CAAgB,UAAM,CACpB0B,gBAAgB,CAACzB,OAAjB,CAA2BmB,YAA3B,CACD,CAFD,CAEG,CAACA,YAAD,CAFH,EAIA,GAAIH,CAAAA,KAAK,CAIPC,kBAAkB,CAACE,YAAD,CAAlB,CACKA,YADL,CAEKO,mBAAmB,CAAC1B,OAN3B,CAQA,GAAI6B,CAAAA,SAAgB,CAAGb,KAAvB,CAEA,GAAI,CAAC1D,YAAY,CAAC0D,KAAK,CAACR,UAAP,CAAmBA,UAAnB,CAAjB,CAAiD,CAE/CqB,SAAS,CAAGxB,MAAM,CAACyB,2BAAP,CAAmCd,KAAnC,CAA0C,CACpDR,UAAU,CAAVA,UADoD,CAEpDG,cAAc,CAAdA,cAFoD,CAA1C,CAAZ,CAID,CAED,GACEd,gBAAgB,CAACG,OAAjB,EACAL,KADA,EAEAA,KAAK,CAACO,MAFN,EAGA,MAAOP,CAAAA,KAAK,CAACO,MAAN,CAAaC,MAApB,GAA+B,QAH/B,EAIAR,KAAK,CAACO,MAAN,GAAiBL,gBAAgB,CAACG,OAAjB,CAAyBE,MAL5C,CAME,CAGA,GAAM6B,CAAAA,YAAY,CAAG1B,MAAM,CAAC2B,iBAAP,CACnBhB,KADmB,CAEnBxE,QAAQ,CAACmD,KAAK,CAACO,MAAN,CAAaC,MAAd,CAAsBR,KAAK,CAACO,MAAN,CAAaA,MAAnC,CAFW,CAGnB,CACEM,UAAU,CAAVA,UADF,CAEEG,cAAc,CAAdA,cAFF,CAHmB,CAArB,CASAkB,SAAS,CACPE,YAAY,GAAK,IAAjB,CACI1B,MAAM,CAACuB,kBAAP,CAA0BG,YAA1B,CAAwC,CACtCvB,UAAU,CAAVA,UADsC,CAEtCG,cAAc,CAAdA,cAFsC,CAAxC,CADJ,CAKIK,KANN,CAOD,CAED,GAAIA,KAAK,GAAKa,SAAd,CAAyB,CAIvBL,kBAAkB,CAAC,UAAM,CACvBF,QAAQ,CAACO,SAAD,CAAR,CACD,CAFiB,CAAlB,CAGD,CAKDb,KAAK,CAAGa,SAAR,CAEA1F,KAAK,CAAC4D,SAAN,CAAgB,UAAM,CACpB,MAAO,WAAM,CAEXyB,kBAAkB,CAChB,iBAAMJ,CAAAA,eAAe,KAAO/B,SAAtB,EAAmCiC,QAAQ,CAACjC,SAAD,CAAjD,EADgB,CAAlB,CAGD,CALD,CAOD,CARD,CAQG,EARH,EAUA,GAAMgC,CAAAA,QAAQ,CAAGlF,KAAK,CAAC4E,WAAN,CAAkB,UAAa,CAC9C,GAAMI,CAAAA,YAAY,CAAGC,eAAe,EAApC,CAEA,MAAOH,CAAAA,kBAAkB,CAACE,YAAD,CAAlB,CACFA,YADE,CAEFO,mBAAmB,CAAC1B,OAFzB,CAGD,CANgB,CAMd,CAACoB,eAAD,CAAkBH,kBAAlB,CANc,CAAjB,CAQA,GAAMgB,CAAAA,OAAO,CAAGxF,eAAe,EAA/B,CAEAK,cAAc,CAAC,CAAEkE,KAAK,CAALA,KAAF,CAASiB,OAAO,CAAPA,OAAT,CAAD,CAAd,CAEA9F,KAAK,CAAC4D,SAAN,CAAgB,UAAM,CACpBkC,OAAO,CAACC,IAAR,CAAa,CAAE5D,IAAI,CAAE,OAAR,CAAiB6D,IAAI,CAAE,CAAEnB,KAAK,CAALA,KAAF,CAAvB,CAAb,EACD,CAFD,CAEG,CAACiB,OAAD,CAAUjB,KAAV,CAFH,EAjMA,0BAwMIhE,uBAAuB,EAxM3B,CAsMaoF,eAtMb,uBAsMEC,SAtMF,CAuMeC,iBAvMf,uBAuMEC,WAvMF,0BA6MItF,mBAAmB,EA7MvB,CA2MauF,gBA3Mb,sBA2MEH,SA3MF,CA4MeI,kBA5Mf,sBA4MEF,WA5MF,sBA+M6CnF,eAAe,EA/M5D,CA+MQsF,gBA/MR,kBA+MQA,gBA/MR,CA+M0BC,cA/M1B,kBA+M0BA,cA/M1B,CAiNA,GAAMC,CAAAA,QAAQ,CAAG/F,WAAW,CAAC,CAC3BwD,MAAM,CAANA,MAD2B,CAE3BgB,QAAQ,CAARA,QAF2B,CAG3BC,QAAQ,CAARA,QAH2B,CAI3BC,GAAG,CAAHA,GAJ2B,CAK3Bc,SAAS,CAAED,eALgB,CAM3BS,mBAAmB,CAAE,CACnBrC,UAAU,CAAVA,UADmB,CAEnBG,cAAc,CAAdA,cAFmB,CANM,CAAD,CAA5B,CAYA,GAAMmC,CAAAA,YAAY,CAAG/F,eAAe,CAAC,CACnCsD,MAAM,CAANA,MADmC,CAEnCkB,GAAG,CAAHA,GAFmC,CAGnCF,QAAQ,CAARA,QAHmC,CAInCC,QAAQ,CAARA,QAJmC,CAAD,CAApC,CAOA,GAAMyB,CAAAA,UAAU,CAAGnG,oBAAoB,CAAoC,CACzEgG,QAAQ,CAARA,QADyE,CAEzEvB,QAAQ,CAARA,QAFyE,CAGzEY,OAAO,CAAPA,OAHyE,CAIzE5B,MAAM,CAANA,MAJyE,CAApC,CAAvC,CAOAnD,kCAAkC,CAAC,CACjC6F,UAAU,CAAVA,UADiC,CAEjCP,gBAAgB,CAAhBA,gBAFiC,CAAD,CAAlC,CAKAnF,aAAa,CAAC,CACZgE,QAAQ,CAARA,QADY,CAEZqB,gBAAgB,CAAhBA,gBAFY,CAAD,CAAb,CAKA,GAAMM,CAAAA,WAAW,CAAGrG,cAAc,CAAuB,CACvDqE,KAAK,CAALA,KADuD,CAEvDV,OAAO,CAAPA,OAFuD,CAGvDyC,UAAU,CAAVA,UAHuD,CAIvDE,aAAa,CAAEvD,OAAO,CAACuD,aAJgC,CAKvDL,QAAQ,CAARA,QALuD,CAMvDvB,QAAQ,CAARA,QANuD,CAOvDC,QAAQ,CAARA,QAPuD,CAQvDwB,YAAY,CAAZA,YARuD,CASvDR,iBAAiB,CAAjBA,iBATuD,CAUvDG,kBAAkB,CAAlBA,kBAVuD,CAWvDE,cAAc,CAAdA,cAXuD,CAYvDtC,MAAM,CAANA,MAZuD,CAavD4B,OAAO,CAAPA,OAbuD,CAAvB,CAAlC,CAgBA,MAAO,CACLjB,KAAK,CAALA,KADK,CAEL+B,UAAU,CAAVA,UAFK,CAGLC,WAAW,CAAXA,WAHK,CAAP,CAKD","sourcesContent":["import * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport { NavigationStateContext } from './BaseNavigationContainer';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport Screen from './Screen';\nimport { navigate } from './CommonActions';\nimport useEventEmitter from './useEventEmitter';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useDescriptors from './useDescriptors';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useFocusEvents from './useFocusEvents';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useChildActionListeners from './useChildActionListeners';\nimport useFocusedListeners from './useFocusedListeners';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport {\n  DefaultRouterOptions,\n  DefaultNavigatorOptions,\n  NavigationState,\n  ParamListBase,\n  RouteConfig,\n  Router,\n  RouterFactory,\n  PartialState,\n  PrivateValueStore,\n  NavigationAction,\n} from './types';\nimport useStateGetters from './useStateGetters';\nimport useOnGetState from './useOnGetState';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute = {\n  params?: {\n    screen?: string;\n    params?: object;\n  };\n};\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <ScreenOptions extends object>(\n  children: React.ReactNode\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    RouteConfig<ParamListBase, string, ScreenOptions>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push(\n          child.props as RouteConfig<ParamListBase, string, ScreenOptions>\n        );\n        return acc;\n      }\n\n      if (child.type === React.Fragment) {\n        // When we encounter a fragment, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<ScreenOptions>(child.props.children)\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen' components as its direct children (found '${\n        // @ts-ignore\n        child.type && child.type.name ? child.type.name : String(child)\n      }')`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(config => {\n      const { name, children, component } = config as any;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (children != null || component !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a a valid React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ScreenOptions extends object,\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<ScreenOptions> & RouterOptions\n) {\n  useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute\n    | undefined;\n\n  const previousRouteRef = React.useRef(route);\n\n  React.useEffect(() => {\n    previousRouteRef.current = route;\n  }, [route]);\n\n  const { children, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...((rest as unknown) as RouterOptions),\n      ...(route?.params && typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const screens = getRouteConfigsFromChildren<ScreenOptions>(children).reduce<\n    Record<string, RouteConfig<ParamListBase, string, ScreenOptions>>\n  >((acc, curr) => {\n    if (curr.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${curr.name}')`\n      );\n    }\n\n    acc[curr.name] = curr;\n    return acc;\n  }, {});\n\n  const routeNames = Object.keys(screens);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr];\n      const initialParamsFromParams =\n        route?.params && route.params.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    },\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    state => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    state =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState,\n    key,\n    performTransaction,\n  } = React.useContext(NavigationStateContext);\n\n  const previousStateRef = React.useRef<\n    NavigationState | PartialState<NavigationState> | undefined\n  >();\n  const initializedStateRef = React.useRef<State>();\n\n  if (\n    initializedStateRef.current === undefined ||\n    currentState !== previousStateRef.current\n  ) {\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    initializedStateRef.current =\n      currentState === undefined || !isStateValid(currentState)\n        ? router.getInitialState({\n            routeNames,\n            routeParamList,\n          })\n        : router.getRehydratedState(currentState as PartialState<State>, {\n            routeNames,\n            routeParamList,\n          });\n  }\n\n  React.useEffect(() => {\n    previousStateRef.current = currentState;\n  }, [currentState]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale untill the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n    });\n  }\n\n  if (\n    previousRouteRef.current &&\n    route &&\n    route.params &&\n    typeof route.params.screen === 'string' &&\n    route.params !== previousRouteRef.current.params\n  ) {\n    // If the route was updated with new name and/or params, we should navigate there\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = router.getStateForAction(\n      state,\n      navigate(route.params.screen, route.params.params),\n      {\n        routeNames,\n        routeParamList,\n      }\n    );\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n          })\n        : state;\n  }\n\n  if (state !== nextState) {\n    // If the state needs to be updated, we'll schedule an update with React\n    // setState in render seems hacky, but that's how React docs implement getDerivedPropsFromState\n    // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n    performTransaction(() => {\n      setState(nextState);\n    });\n  }\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state objec we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      performTransaction(\n        () => getCurrentState() !== undefined && setState(undefined)\n      );\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter();\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const {\n    listeners: actionListeners,\n    addListener: addActionListener,\n  } = useChildActionListeners();\n\n  const {\n    listeners: focusedListeners,\n    addListener: addFocusedListener,\n  } = useFocusedListeners();\n\n  const { getStateForRoute, addStateGetter } = useStateGetters();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key,\n    listeners: actionListeners,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n    },\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<State, NavigationAction, EventMap>({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners,\n  });\n\n  useOnGetState({\n    getState,\n    getStateForRoute,\n  });\n\n  const descriptors = useDescriptors<State, ScreenOptions>({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addActionListener,\n    addFocusedListener,\n    addStateGetter,\n    router,\n    emitter,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n  };\n}\n"]}