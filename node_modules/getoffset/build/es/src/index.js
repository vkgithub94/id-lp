import _typeof from "reshow-runtime/es/helpers/typeof";
import getScrollInfo from 'get-scroll-info';
import get from 'get-object-value';
import { UNDEFINED } from 'reshow-constant';

var unifyTouch = function unifyTouch(e) {
  return e && e.changedTouches ? get(e, ['changedTouches', 0]) : e;
};

var mouse = function mouse(e, dom, scrollNode) {
  if (!dom) {
    dom = e.currentTarget || e.target;
  }

  e = unifyTouch(e);
  var x = e.clientX;
  var y = e.clientY;
  var svgXY = toSvgXY(dom)(x, y);

  if (false !== svgXY) {
    var svgX = svgXY.x,
        svgY = svgXY.y;
    return [svgX, svgY];
  } else {
    var domXY = getOffset(dom, scrollNode);
    return [x - domXY.left - dom.clientLeft, y - domXY.top - dom.clientTop];
  }
};

var toSvgXY = function toSvgXY(dom, zoom) {
  return function (x, y) {
    var svg = dom.ownerSVGElement || dom;

    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = x;
      point.y = y;
      point = point.matrixTransform(dom.getScreenCTM().inverse());
      return getZoomXY(zoom)(point.x, point.y);
    } else {
      return false;
    }
  };
};

var getSvgMatrixXY = function getSvgMatrixXY(dom, zoom) {
  return function (x, y) {
    var svg = dom.ownerSVGElement || dom;

    if (svg.getScreenCTM) {
      var _dom$getScreenCTM = dom.getScreenCTM(),
          a = _dom$getScreenCTM.a,
          b = _dom$getScreenCTM.b,
          c = _dom$getScreenCTM.c,
          d = _dom$getScreenCTM.d,
          e = _dom$getScreenCTM.e,
          f = _dom$getScreenCTM.f;

      var _svg$getBoundingClien = svg.getBoundingClientRect(),
          left = _svg$getBoundingClien.left,
          top = _svg$getBoundingClien.top;

      var svgX = a * x + c * y + e - left;
      var svgY = b * x + d * y + f - top;
      return getZoomXY(zoom)(svgX, svgY);
    }
  };
};

var getZoomXY = function getZoomXY(zoom) {
  return function (x, y) {
    if (!zoom) {
      return {
        x: x,
        y: y
      };
    }

    var zoomK = get(zoom, ['k'], 1);
    var zoomX = get(zoom, ['x'], 0);
    var zoomY = get(zoom, ['y'], 0);
    var zx = (x - zoomX) / zoomK;
    var zy = (y - zoomY) / zoomK;
    return {
      x: zx,
      y: zy
    };
  };
};

var getRectWithElOffset = function getRectWithElOffset(dom) {
  var top = 0;
  var left = 0;
  var el = dom;

  do {
    var offsetTop = el.offsetTop || 0;
    var offsetLeft = el.offsetLeft || 0;

    if ('BODY' === el.nodeName) {
      top += offsetTop;
      left += offsetLeft;
    } else {
      top += offsetTop - el.scrollTop;
      left += offsetLeft - el.scrollLeft;
    }

    el = el.offsetParent;
  } while (el);

  return {
    top: top,
    left: left
  };
};

var getOffset = function getOffset(dom, scrollNode) {
  var top = 0;
  var left = 0;
  var w;
  var h;
  var scrollInfo = 0 === scrollNode ? {
    top: 0,
    left: 0
  } : getScrollInfo(scrollNode);

  if (UNDEFINED !== (typeof SVGElement === "undefined" ? "undefined" : _typeof(SVGElement)) && dom instanceof SVGElement) {
    var rect = dom.getBoundingClientRect();
    top = rect.top + scrollInfo.top;
    left = rect.left + scrollInfo.left;
    w = rect.width;
    h = rect.height;
  } else {
    w = dom.offsetWidth;
    h = dom.offsetHeight;

    if (dom.getBoundingClientRect) {
      var _rect = dom.getBoundingClientRect();

      top = parseInt(_rect.top + scrollInfo.top, 10);
      left = parseInt(_rect.left + scrollInfo.left, 10);
    } else {
      var rectOffset = getRectWithElOffset(dom);
      top = rectOffset.top;
      left = rectOffset.left;
    }
  }

  var result = {
    w: w,
    h: h,
    width: w,
    height: h,
    top: top,
    right: left + w,
    bottom: top + h,
    left: left
  };
  return result;
};

export { mouse, toSvgXY, getSvgMatrixXY, unifyTouch };
export default getOffset;