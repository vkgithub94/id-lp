import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";

/* jshint esnext: true */
import React, { createElement, Children } from 'react';
import * as Atoms from 'react-atomic-atom';
import get from 'get-object-value';
import ucfirst from 'ucfirst';
import injectStyle from '../../src/lib/styles/injectStyle';
import bindStyles from '../../src/lib/styles/bindStyles';
import { mixClass } from 'class-lib';
var keys = Object.keys;

var getChildren = function getChildren(render, children) {
  if (!render) {
    return null;
  }
  /**
   * Hack for https://fb.me/react-warning-keys
   * Each child in an array or iterator should have a unique "key"
   */


  return Children.map(children, function (c) {
    return c;
  });
};

var SemanticUI = function SemanticUI(_ref) {
  var atom = _ref.atom,
      children = _ref.children,
      renderChildren = _ref.renderChildren,
      styles = _ref.styles,
      styleOrder = _ref.styleOrder,
      ui = _ref.ui,
      others = _objectWithoutProperties(_ref, ["atom", "children", "renderChildren", "styles", "styleOrder", "ui"]);

  var component;

  switch (atom) {
    case 'null':
      return null;

    case 'input':
      component = Atoms.Input;
      renderChildren = false;
      break;

    case 'img':
      component = Atoms.Img;
      renderChildren = false;
      break;

    case 'path':
      component = Atoms.Path;
      renderChildren = false;
      ui = false;
      break;

    default:
      component = get(Atoms, [ucfirst(atom || '')], function () {
        return Atoms.Div;
      });
      break;
  }

  var className = others.className,
      style = others.style; // bindStyles need after inject

  var bindProps = {};

  if (styles) {
    // Need avoid props pass by ref !!important!!
    injectStyle();
    bindProps = bindStyles({
      className: className,
      style: style,
      styles: styles,
      styleOrder: styleOrder
    });
  }

  keys(bindProps).forEach(function (key) {
    return others[key] = bindProps[key];
  });

  if (ui) {
    // others.className maybe effect by bindProps, so use it here.
    others.className = mixClass(others.className, 'ui');
  }

  return createElement(component, others, getChildren(renderChildren, children));
};

SemanticUI.defaultProps = {
  ui: true,
  renderChildren: true
};
export default SemanticUI;